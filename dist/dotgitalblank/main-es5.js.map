{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/_helpers/error.interceptor.ts","webpack:///src/app/_helpers/jwt.interceptor.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/applications-admin/applications-admin.component.ts","webpack:///src/app/applications-admin/applications-admin.component.html","webpack:///src/app/applications-dashboard/applications-dashboard.component.html","webpack:///src/app/applications-dashboard/applications-dashboard.component.ts","webpack:///src/app/applications-dashboard/message/message.component.ts","webpack:///src/app/applications-dashboard/message/message.component.html","webpack:///src/app/applications-stats/applications-stats.component.ts","webpack:///src/app/applications-stats/applications-stats.component.html","webpack:///src/app/applications/applications.component.ts","webpack:///src/app/applications/applications.component.html","webpack:///src/app/applications/create-application/create-application.component.ts","webpack:///src/app/applications/create-application/create-application.component.html","webpack:///src/app/applications/manage-applications/manage-applications.component.ts","webpack:///src/app/applications/manage-applications/manage-applications.component.html","webpack:///src/app/auth.service.ts","webpack:///src/app/dashboard/dashboard.component.ts","webpack:///src/app/dashboard/dashboard.component.html","webpack:///src/app/data.service.ts","webpack:///src/app/forgot-password/forgot-password.component.ts","webpack:///src/app/forgot-password/forgot-password.component.html","webpack:///src/app/form-list/form-list.component.ts","webpack:///src/app/form-list/form-list.component.html","webpack:///src/app/graphql.module.ts","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/models/user.ts","webpack:///src/app/navigation/navigation.component.ts","webpack:///src/app/navigation/navigation.component.html","webpack:///src/app/register/register.component.ts","webpack:///src/app/register/register.component.html","webpack:///src/app/services/auth-guard.service.ts","webpack:///src/app/services/auth.service.ts","webpack:///src/app/services/socket.service.ts","webpack:///src/app/users/create-user/create-user.component.ts","webpack:///src/app/users/create-user/create-user.component.html","webpack:///src/app/users/users.component.ts","webpack:///src/app/users/users.component.html","webpack:///src/app/whiteboard/whiteboard.component.ts","webpack:///src/app/whiteboard/whiteboard.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts","webpack:///ws (ignored)"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","ErrorInterceptor","authenticationService","request","next","handle","pipe","err","status","logout","location","reload","error","message","statusText","JwtInterceptor","currentUser","currentUserValue","jwt","url","startsWith","clone","setHeaders","Authorization","routes","path","redirectTo","pathMatch","component","canActivate","children","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","config","options","query","userId","AppModule","provide","useClass","multi","initializeApp","firebase","declarations","providers","bootstrap","entryComponents","ApplicationsAdminComponent","dataService","socketService","loading","search","applicationType","startPage","limitPage","searchUpdate","editing","agents","displayedColumns","getUsers","getApplications","subscribe","value","get","method","agent","console","log","agentSelected","getData","data","users","where","dataSource","applications","totalPages","applicationsConnection","aggregate","count","appId","includes","push","splice","indexOf","app","field","appData","updateData","send","pageIndex","pageSize","closeConnection","keyUpLoading","filteByAgent","displayCol","paginator","ApplicationsDashboardComponent","dialog","authService","months","display","applicatiosOld","fullScreen","user","getMessage","getOldApps","res","apps","agentStats","groupBy","stats","forEach","el","key","connection","sort","a","b","topAgent","static","whiteBoardMessage","dialogRef","open","width","afterClosed","element","document","getElementById","screenfull","isEnabled","toggle","getAllApps","oldApps","openFullScreen","MessageComponent","close","onSubmit","onNoClick","ApplicationsStatsComponent","getStats","date","Date","thisMonth","getFullYear","getMonth","slice","length","statsData","name","fullName","avatar","moneyIn","reduce","total","approved","invoiceOut","invoicePaid","place","parseInt","ApplicationsComponent","applicationData","createById","createdAt","address","price","completed","offerOut","listingAgreement","offerExecuted","closed","appType","denied","createApp","CreateApplicationComponent","hide","createApplicationForm","required","createData","createApplication","ManageApplicationsComponent","afAuth","years","today","monthCurr","String","padStart","yearCurr","selectedMonth","toString","selectedYear","uid","filterValue","filter","trim","toLowerCase","start","end","getAdminApplications","updateApp","catch","event","applyFilter","changeMonth","changeYear","AuthService","fireAuth","authState","userDetails","email","password","auth","signInWithEmailAndPassword","createUserWithEmailAndPassword","sendPasswordResetEmail","sendEmailVerification","signOut","providedIn","DashboardComponent","router","zone","run","navigateByUrl","DataService","afStore","apollo","fetchPolicy","errorPolicy","mutate","mutation","collection","doc","set","createTeam","teamId","add","valueChanges","docName","ref","orderBy","startAt","endAt","merge","ForgotPasswordComponent","snackBard","forgotForm","forgotPassword","duration","navigate","errorMessage","messages","forgot","forms","file","details","FormListComponent","uri","createApollo","httpLink","link","create","cache","GraphQLModule","useFactory","deps","LoginComponent","loginForm","minLength","login","User","NavigationComponent","breakpointObserver","isHandset$","observe","Handset","result","matches","RegisterComponent","userData","isAdmin","isActive","registerForm","register","createUser","AuthGuard","route","state","queryParams","returnUrl","http","currentUserSubject","JSON","parse","localStorage","getItem","asObservable","username","pw","post","identifier","setItem","stringify","emailAddress","pwcnf","passwordConfirmation","blocked","newUser","roleId","role","put","_id","headers","removeItem","SocketService","socket","to","msg","emit","fromEvent","removeListener","CreateUserComponent","afStorage","files","Set","update","adminChanged","blokedChanged","undefined","imageSrc","passwordValidators","createUserForm","disabled","isBloked","updateUser","erroMsg","uploadAvatar","closeRefresh","formData","FormData","append","item","reader","FileReader","onload","readAsDataURL","preview","UsersComponent","queryUsers","unsubscribe","addUser","WhiteboardComponent","year","month","environment","production","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { AuthService } from './../services/auth.service';\n// import { AuthenticationService } from '@app/_services';\n\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n    constructor(\n        private authenticationService: AuthService\n    ) { }\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        return next.handle(request).pipe(catchError(err => {\n            if (err.status === 401) {\n                // auto logout if 401 response returned from api\n                this.authenticationService.logout();\n                location.reload(true);\n            }\n\n            const error = err.error.message || err.statusText;\n            return throwError(error);\n        }));\n    }\n}","import { Injectable } from '@angular/core';\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './../services/auth.service';\n@Injectable()\nexport class JwtInterceptor implements HttpInterceptor {\n    constructor(\n        private authenticationService: AuthService\n    ) { }\n\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        // add authorization header with jwt token if available\n        // console.log(request);\n        const currentUser = this.authenticationService.currentUserValue;\n        if (currentUser && currentUser.jwt && request.url.startsWith('https://backend.apartmentsource.com')) {\n            request = request.clone({\n                setHeaders: {\n                    Authorization: `Bearer ${currentUser.jwt}`\n                }\n            });\n        }\n\n        return next.handle(request);\n    }\n}\n","import { ApplicationsStatsComponent } from './applications-stats/applications-stats.component';\nimport { ApplicationsAdminComponent } from './applications-admin/applications-admin.component';\nimport { ManageApplicationsComponent } from './applications/manage-applications/manage-applications.component';\nimport { ApplicationsDashboardComponent } from './applications-dashboard/applications-dashboard.component';\nimport { WhiteboardComponent } from './whiteboard/whiteboard.component';\nimport { ApplicationsComponent } from './applications/applications.component';\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { AuthGuard } from './services/auth-guard.service';\nimport { RegisterComponent } from './register/register.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { FormListComponent } from './form-list/form-list.component';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\nimport { UsersComponent } from './users/users.component';\n\nconst routes: Routes = [\n  { path: '', redirectTo: 'dashboard/applications-dashboard', pathMatch: 'full' },\n  { path: 'login', component: LoginComponent },\n  { path: 'forgot-password', component: ForgotPasswordComponent },\n  { path: 'dashboard', component: DashboardComponent, canActivate: [AuthGuard], children: [\n    { path: 'register', component: RegisterComponent },\n    { path: 'forms', component: FormListComponent },\n    { path: 'users', component: UsersComponent},\n    { path: 'applications', component: ApplicationsComponent },\n    { path: 'whiteboard', component: WhiteboardComponent },\n    { path: 'applications-stats', component: ApplicationsStatsComponent },\n    { path: 'applications-dashboard', component: ApplicationsDashboardComponent },\n    { path: 'manage-applications', component: ManageApplicationsComponent },\n    { path: 'applications-admin', component: ApplicationsAdminComponent }\n  ] },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'dotgitalblank';\n}\n","<!--The content below is only a placeholder and can be replaced.-->\n\n<router-outlet></router-outlet>\n","import { ApplicationsDashboardComponent } from './applications-dashboard/applications-dashboard.component';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { NavigationComponent } from './navigation/navigation.component';\nimport { LayoutModule } from '@angular/cdk/layout';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { FormListComponent } from './form-list/form-list.component';\n\nimport { AngularFireModule } from '@angular/fire';\nimport { AngularFirestoreModule } from '@angular/fire/firestore';\nimport { AngularFireAuthModule } from '@angular/fire/auth';\nimport { AngularFireStorageModule } from '@angular/fire/storage';\nimport { environment } from '../environments/environment';\n\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { LoginComponent } from './login/login.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { RegisterComponent } from './register/register.component';\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { UsersComponent } from './users/users.component';\nimport { CreateUserComponent } from './users/create-user/create-user.component';\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { ApplicationsComponent } from './applications/applications.component';\nimport { CreateApplicationComponent } from './applications/create-application/create-application.component';\nimport { WhiteboardComponent } from './whiteboard/whiteboard.component';\nimport { ManageApplicationsComponent } from './applications/manage-applications/manage-applications.component';\nimport { ErrorInterceptor } from './_helpers/error.interceptor';\nimport { JwtInterceptor } from './_helpers/jwt.interceptor';\nimport { GraphQLModule } from './graphql.module';\n\nimport { SocketIoModule, SocketIoConfig } from 'ngx-socket-io';\nimport { ApplicationsAdminComponent } from './applications-admin/applications-admin.component';\nimport { MessageComponent } from './applications-dashboard/message/message.component';\nimport { ApplicationsStatsComponent } from './applications-stats/applications-stats.component';\n\nconst config: SocketIoConfig = { url: 'https://backend.apartmentsource.com', options: {query: {userId: null}} };\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NavigationComponent,\n    FormListComponent,\n    LoginComponent,\n    DashboardComponent,\n    RegisterComponent,\n    ForgotPasswordComponent,\n    UsersComponent,\n    CreateUserComponent,\n    CreateApplicationComponent,\n    ApplicationsComponent,\n    CreateApplicationComponent,\n    WhiteboardComponent,\n    ApplicationsDashboardComponent,\n    ManageApplicationsComponent,\n    ApplicationsAdminComponent,\n    MessageComponent,\n    ApplicationsStatsComponent,\n  ],\n  imports: [\n    FormsModule,\n    ReactiveFormsModule,\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    LayoutModule,\n    MatToolbarModule,\n    MatButtonModule,\n    MatSidenavModule,\n    MatIconModule,\n    MatListModule,\n    MatSelectModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatCheckboxModule,\n    MatFormFieldModule,\n    MatSortModule,\n    MatDialogModule,\n    MatButtonToggleModule,\n    MatSnackBarModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatCardModule,\n    MatPaginatorModule,\n    MatSlideToggleModule,\n    MatTableModule,\n    MatInputModule,\n    MatRadioModule,\n    HttpClientModule,\n    AngularFireModule.initializeApp(environment.firebase),\n    AngularFirestoreModule,\n    AngularFireAuthModule,\n    AngularFireStorageModule,\n    ScrollingModule,\n    FlexLayoutModule,\n    GraphQLModule,\n    SocketIoModule.forRoot(config),\n    // SocketIoModule,\n  ],\n  providers: [\n    { provide: HTTP_INTERCEPTORS, useClass: JwtInterceptor, multi: true },\n    { provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true },\n  ],\n  bootstrap: [AppComponent],\n  entryComponents: [\n    CreateUserComponent,\n    CreateApplicationComponent,\n    MessageComponent,\n  ]\n})\nexport class AppModule { }\n","import { SocketService } from './../services/socket.service';\nimport { Component, OnInit, OnDestroy } from '@angular/core';\nimport { DataService } from './../data.service';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { Application } from './../applications/application';\n\n@Component({\n  selector: 'app-applications-admin',\n  templateUrl: './applications-admin.component.html',\n  styleUrls: ['./applications-admin.component.scss']\n})\nexport class ApplicationsAdminComponent implements OnInit, OnDestroy {\n\n  public loading = true;\n  public search: string = '';\n  public applicationType = 'Leasing';\n  public startPage = 0;\n  public limitPage = 10;\n  public totalPages: number;\n  public searchUpdate = new Subject<string>();\n  public editing: string[] = [];\n  public agents = [];\n  public agentSelected: string;\n\n  public dataSource: MatTableDataSource<Application>;\n  public displayedColumns: string[] = ['address',\n  'agent',\n  'createdAt',\n  'applicationType',\n  'price',\n  'moneyIn',\n  'approved' ,\n  'denied',\n  'invoiceOut',\n  'invoicePaid',\n  'paid',\n  'edit'];\n\n  constructor(\n    private dataService: DataService,\n    private socketService: SocketService,\n  ) { }\n\n  ngOnInit() {\n    this.getUsers();\n    this.getApplications();\n\n    this.searchUpdate.pipe(\n      debounceTime(400),\n      distinctUntilChanged())\n      .subscribe(value => {\n        this.search = value;\n        this.getApplications();\n      });\n\n    this.socketService.get().subscribe(method => {\n      // console.log(method);\n      if ( typeof this[method] === 'function' ) {\n        this[method]();\n      }\n    });\n  }\n\n  keyUpLoading() {\n    this.loading = true;\n  }\n\n  filteByAgent(agent) {\n    console.log(agent);\n    this.agentSelected = agent;\n    this.getApplications();\n  }\n\n  displayCol(applicationType) {\n    this.loading = true;\n    this.applicationType = applicationType;\n    switch (applicationType) {\n      case 'Leasing':\n        this.displayedColumns = ['address', 'agent', 'createdAt', 'applicationType', 'price', 'moneyIn', 'approved' , 'denied',\n        'invoiceOut',\n        'invoicePaid',\n        'paid', 'edit'];\n        break;\n      case 'Listing':\n        this.displayedColumns = ['address', 'agent', 'createdAt', 'applicationType',\n        'price', 'listingAgreement', 'offerExecuted', 'closed',\n        'invoiceOut',\n        'invoicePaid',\n        'paid', 'edit'];\n        break;\n      case 'Buying':\n        this.displayedColumns = ['address', 'agent', 'createdAt', 'applicationType',\n        'price', 'offerOut', 'offerExecuted', 'closed',\n        'invoiceOut',\n        'invoicePaid',\n        'paid', 'edit'];\n        break;\n      default:\n        break;\n    }\n    this.getApplications();\n  }\n\n  getUsers() {\n    const query = `query{\n      users(sort: \"fullName:asc\"){\n        id,\n        fullName\n      }\n    }`;\n\n    this.dataService.getData(query).subscribe(({ data, loading })  => {\n      this.agents = data.users;\n    });\n  }\n\n  getApplications() {\n    let where;\n    if (this.agentSelected) {\n      where = `{\n        agent: \"${this.agentSelected}\",\n        address_contains: \"${this.search}\",\n        applicationType: \"${this.applicationType}\"\n      }`;\n    } else {\n      where = `{\n        address_contains: \"${this.search}\",\n        applicationType: \"${this.applicationType}\"\n      }`;\n    }\n\n\n    const query = `\n    query{\n        applications(sort: \"createdAt:desc\", start: ${this.startPage}, limit: ${this.limitPage}, where: ${where}) {\n            id,\n            applicationType,\n            address,\n            approved,\n            createdAt,\n            denied,\n            listingAgreement,\n            offerOut,\n            offerExecuted,\n            closed,\n            invoiceOut,\n            invoicePaid,\n            paid,\n            moneyIn,\n            price,\n            agent {\n                id\n                fullName\n            }\n        }\n        applicationsConnection (where: ${where}) {\n            aggregate {\n                count\n            }\n        }\n    }`;\n\n    this.dataService.getData(query).subscribe(({ data, loading })  => {\n      this.dataSource = new MatTableDataSource<Application>(data.applications);\n      this.totalPages = data.applicationsConnection.aggregate.count;\n      this.loading = false;\n    });\n  }\n\n  edit(appId) {\n    if (!this.editing.includes(appId)) {\n      this.editing.push(appId);\n    }\n  }\n\n  save(appId) {\n    if (this.editing.includes(appId)) {\n      this.editing.splice( this.editing.indexOf(appId), 1 );\n    }\n  }\n\n  updateApp(app: Application, field) {\n    if (this.editing.includes(app.id)) {\n      this.loading = true;\n      app[field] = !app[field];\n      const appData = `mutation {\n          updateApplication(input: {\n            where: {\n              id: \"${app.id}\"\n            },\n            data: {\n              ${field}: ${app[field]}\n            }\n          }) {\n            application {\n              id\n            }\n          }\n        }`;\n\n      this.dataService.updateData(appData).subscribe(() => {\n        this.getApplications();\n        this.socketService.send('public', 'getApplications');\n      });\n    }\n  }\n\n  paginator(e) {\n    this.loading = true;\n    this.startPage = e.pageIndex !== 0 ? e.pageIndex * e.pageSize : 0;\n    this.limitPage = e.pageSize;\n    this.getApplications();\n  }\n\n  ngOnDestroy(): void {\n    this.socketService.closeConnection();\n  }\n}\n","<mat-progress-bar mode=\"indeterminate\" *ngIf=\"loading\" class=\"loading-top\" color=\"warn\"></mat-progress-bar>\n<div class=\"content\">\n    <mat-card style=\"padding: 5px 10px; margin-bottom: 10px; border-radius: 0px;\" class=\"mat-elevation-z1\">\n        <div fxLayout=\"row\" fxLayoutAlign=\"start stretch\" fxLayoutGap=\"10px\">\n            <div fxFlex>\n              <mat-form-field appearance=\"outline\"  class=\"no-padding\">\n                <mat-label>Search</mat-label>\n                <input matInput class=\"form-control\" [(ngModel)]=\"search\" \n                type=\"text\" name=\"userQuestion\" id=\"userQuestions\"\n                (ngModelChange)=\"this.searchUpdate.next($event)\" (keyup)=\"keyUpLoading()\" >\n                <button mat-button *ngIf=\"search\" matSuffix mat-icon-button aria-label=\"Clear\" (click)=\"this.searchUpdate.next('')\">\n                  <mat-icon>close</mat-icon>\n                </button>\n              </mat-form-field>\n            </div>\n            <div>\n              <mat-form-field appearance=\"outline\" class=\"no-padding\">\n                  <mat-label>Agent</mat-label>\n                  <mat-select placeholder=\"Agent\" name=\"item\" [value]=\"agentSelected\" (selectionChange)=\"filteByAgent($event.value)\">\n                      <mat-option>Any</mat-option>\n                      <mat-option *ngFor=\"let item of agents\" [value]=\"item.id\">\n                          {{item.fullName}}\n                      </mat-option>\n                  </mat-select>\n              </mat-form-field>\n            </div>\n            <div>\n              <mat-button-toggle-group #group=\"matButtonToggleGroup\" value=\"Leasing\" class=\"full-width margin-botton\">\n                <mat-button-toggle value=\"Leasing\" aria-label=\"Text align center\" (click)=\"displayCol('Leasing')\">\n                  Leasing\n                </mat-button-toggle>\n                <mat-button-toggle value=\"Listing\" aria-label=\"Text align center\" (click)=\"displayCol('Listing')\">\n                  Listing\n                </mat-button-toggle>\n                <mat-button-toggle value=\"Buying\" aria-label=\"Text align center\" (click)=\"displayCol('Buying')\">\n                  Buying\n                </mat-button-toggle>\n              </mat-button-toggle-group>\n            </div>\n          </div>\n    </mat-card>\n\n    <div class=\"mat-elevation-z2\">\n        <table mat-table [dataSource]=\"dataSource\" matSort>\n    \n          <ng-container matColumnDef=\"address\">\n            <th mat-header-cell *matHeaderCellDef> Address </th>\n            <td mat-cell *matCellDef=\"let row\" style=\"width: 15%;\">\n              <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                  {{row.address}}\n              </div>\n            </td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"agent\">\n            <th mat-header-cell *matHeaderCellDef> Agent </th>\n            <td mat-cell *matCellDef=\"let row\" style=\"width: 15%;\">\n              <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                  {{row.agent.fullName}}\n              </div>\n            </td>\n          </ng-container>\n    \n          <ng-container matColumnDef=\"createdAt\">\n            <th mat-header-cell *matHeaderCellDef> Date </th>\n            <td mat-cell *matCellDef=\"let row\" style=\"width: 8%;\">\n              <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                  {{row.createdAt | date:'shortDate' }}\n              </div>\n            </td>\n          </ng-container>\n    \n          <ng-container matColumnDef=\"applicationType\">\n            <th mat-header-cell *matHeaderCellDef> Type </th>\n            <td mat-cell *matCellDef=\"let row\" style=\"width: 8%;\">\n              <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                {{row.applicationType}}\n              </div>\n            </td>\n          </ng-container>\n    \n          <ng-container matColumnDef=\"price\">\n              <th mat-header-cell *matHeaderCellDef> Price </th>\n              <td mat-cell *matCellDef=\"let row\" style=\"width: 8%;\">\n                <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                    ${{row.price | number }}\n                </div>\n              </td>\n            </ng-container>\n    \n            <ng-container matColumnDef=\"offerOut\">\n              <th mat-header-cell *matHeaderCellDef>Offer Out </th>\n              <td mat-cell *matCellDef=\"let row\" style=\"width: 8%;\">\n                  <mat-checkbox [(ngModel)]=\"row.offerOut\" color=\"primary\" [disabled]=\"!editing.includes(row.id)\" (click)=\"updateApp(row, 'offerOut')\"></mat-checkbox>\n              </td>\n            </ng-container>\n    \n            <ng-container matColumnDef=\"listingAgreement\">\n              <th mat-header-cell *matHeaderCellDef>Listing <br> Agreement </th>\n              <td mat-cell *matCellDef=\"let row\" style=\"width: 8%;\">\n                <mat-checkbox [(ngModel)]=\"row.listingAgreement\" color=\"primary\" [disabled]=\"!editing.includes(row.id)\" (click)=\"updateApp(row, 'listingAgreement')\"></mat-checkbox>\n              </td>\n            </ng-container>\n    \n            <ng-container matColumnDef=\"offerExecuted\">\n              <th mat-header-cell *matHeaderCellDef>Offer <br> Executed </th>\n              <td mat-cell *matCellDef=\"let row\" style=\"width: 8%;\">\n                  <mat-checkbox [(ngModel)]=\"row.offerExecuted\" color=\"primary\" [disabled]=\"!editing.includes(row.id)\" (click)=\"updateApp(row, 'offerExecuted')\"></mat-checkbox>\n              </td>\n            </ng-container>\n    \n            <ng-container matColumnDef=\"closed\">\n              <th mat-header-cell *matHeaderCellDef>Closed </th>\n              <td mat-cell *matCellDef=\"let row\" style=\"width: 8%;\">\n                <mat-checkbox [(ngModel)]=\"row.closed\" color=\"primary\" [disabled]=\"!editing.includes(row.id)\" (click)=\"updateApp(row, 'closed')\"></mat-checkbox>\n              </td>\n            </ng-container>\n    \n          <ng-container matColumnDef=\"moneyIn\">\n            <th mat-header-cell *matHeaderCellDef>Money In </th>\n            <td mat-cell *matCellDef=\"let row\" style=\"width: 8%;\">\n                <mat-checkbox [(ngModel)]=\"row.moneyIn\" color=\"primary\" [disabled]=\"!editing.includes(row.id)\" (click)=\"updateApp(row, 'moneyIn')\"></mat-checkbox>\n            </td>\n          </ng-container>\n    \n          <ng-container matColumnDef=\"approved\">\n            <th mat-header-cell *matHeaderCellDef>Approved </th>\n            <td mat-cell *matCellDef=\"let row\" style=\"width: 8%;\">\n              <mat-checkbox [(ngModel)]=\"row.approved\" color=\"primary\" [disabled]=\"!editing.includes(row.id)\" (click)=\"updateApp(row, 'approved')\"></mat-checkbox>\n            </td>\n          </ng-container>\n    \n            <ng-container matColumnDef=\"denied\">\n                <th mat-header-cell *matHeaderCellDef>Denied </th>\n                <td mat-cell *matCellDef=\"let row\" style=\"width: 8%;\">\n                  <mat-checkbox [(ngModel)]=\"row.denied\" color=\"primary\" [disabled]=\"!editing.includes(row.id)\" (click)=\"updateApp(row, 'denied')\"></mat-checkbox>\n                </td>\n              </ng-container>\n\n              <ng-container matColumnDef=\"invoiceOut\">\n                <th mat-header-cell *matHeaderCellDef>Invoice Out </th>\n                <td mat-cell *matCellDef=\"let row\" style=\"width: 8%;\">\n                  <mat-checkbox [(ngModel)]=\"row.invoiceOut\" color=\"primary\" [disabled]=\"!editing.includes(row.id)\" (click)=\"updateApp(row, 'invoiceOut')\"></mat-checkbox>\n                </td>\n              </ng-container>\n\n              <ng-container matColumnDef=\"invoicePaid\">\n                <th mat-header-cell *matHeaderCellDef>Invoice Paid </th>\n                <td mat-cell *matCellDef=\"let row\" style=\"width: 8%;\">\n                  <mat-checkbox [(ngModel)]=\"row.invoicePaid\" color=\"primary\" [disabled]=\"!editing.includes(row.id)\" (click)=\"updateApp(row, 'invoicePaid')\"></mat-checkbox>\n                </td>\n              </ng-container>\n\n              <ng-container matColumnDef=\"paid\">\n                <th mat-header-cell *matHeaderCellDef>Paid </th>\n                <td mat-cell *matCellDef=\"let row\" style=\"width: 8%;\">\n                  <mat-checkbox [(ngModel)]=\"row.paid\" color=\"primary\" [disabled]=\"!editing.includes(row.id)\" (click)=\"updateApp(row, 'paid')\"></mat-checkbox>\n                </td>\n              </ng-container>\n\n              <ng-container matColumnDef=\"edit\">\n                <th mat-header-cell *matHeaderCellDef> </th>\n                <td mat-cell *matCellDef=\"let row\" style=\"width: 5%;\">\n                  <button mat-icon-button *ngIf=\"!editing.includes(row.id)\" (click)=\"edit(row.id)\" ><mat-icon>edit</mat-icon></button>\n                  <button mat-icon-button *ngIf=\"editing.includes(row.id)\" (click)=\"save(row.id)\"><mat-icon>save</mat-icon></button>\n                  <!-- <button mat-icon-button *ngIf=\"editing.includes(row.id)\" (click)=\"edit(row.id)\"><mat-icon>delete</mat-icon></button> -->\n                </td>\n              </ng-container>\n    \n          <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n          <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\">\n          </tr>\n        </table>\n    \n        <mat-paginator [length]=\"totalPages\"\n                  [pageSize]=\"10\"\n                  [pageSizeOptions]=\"[5, 10, 25, 100]\"\n                  (page)=\"paginator($event)\">\n        </mat-paginator>\n      </div>\n    \n    </div>","<div class=\"full-screen\">\n  <content id=\"full-screen\">\n  <button mat-mini-fab (click)=\"openFullScreen()\"><mat-icon>{{ !fullScreen ? 'fullscreen' : 'fullscreen_exit'}}</mat-icon></button>\n  <div fxLayout=\"row wrap\" fxLayoutAlign=\"space-evenly stretch\" class=\"wrapper\">\n    <ng-container *ngFor=\"let item of apps\">\n      <mat-card \n      fxFlex=\"0 1 calc(25% - 10px)\"\n      fxFlex.lt-lg=\"0 1 calc(33.3% - 10px)\"\n      fxFlex.lt-md=\"0 1 calc(50% - 10px)\"\n      fxFlex.lt-sm=\"0 1 calc(100% - 10px)\">\n        <div\n        gdAreas=\"avatar content\"\n        gdGap=\"5px\"\n        gdRows=\"auto\"\n        gdColumns=\"55px auto\">\n        <div gdArea=\"avatar\" class=\"avatar-container\">\n          <img class=\"avatar_smm\" src=\"https://backend.apartmentsource.com/{{item.agent.avatar['0'].url}}\" *ngIf=\"item.agent.avatar['0'] && item.agent.avatar['0'].url\" />\n          <img class=\"avatar_smm\" src=\"'../../../../assets/avatar.svg\" *ngIf=\"!item.agent.avatar['0']\" />\n          <mat-icon *ngIf=\"item.agent.id == topAgent\" class=\"top-agent-star\">grade</mat-icon>\n        </div>\n        <div gdArea=\"content\">\n          <h4 class=\"address\">{{ item.address }}</h4><span class=\"create-by\"> {{ item.agent.fullName }} - {{ item.createdAt | date:\"MM/dd/yyyy\" }}</span> <br />\n\n          <div class=\"status-container\">\n            <span class=\"status-{{ item.offerOut }} apps-status\">Offer Out <mat-icon class=\"material-icons md-24\">done</mat-icon></span>\n            <span class=\"status-{{ item.listingAgreement }} apps-status\">List Agr <mat-icon class=\"material-icons md-24\">done</mat-icon></span>\n            <span class=\"status-{{ item.offerExecuted }} apps-status\">Offer Exec <mat-icon class=\"material-icons md-24\">done</mat-icon></span>\n            <span class=\"status-{{ item.closed }} apps-status\">Closed <mat-icon class=\"material-icons md-24\">done</mat-icon></span>\n            <span class=\"status-{{ item.moneyIn }} apps-status\">Money In <mat-icon class=\"material-icons md-24\">done</mat-icon></span>\n            <span class=\"status-{{ item.approved }} apps-status\">Approved <mat-icon class=\"material-icons md-24\">done</mat-icon></span>\n            <span class=\"status-{{ item.denied }} apps-status\">Denied <mat-icon class=\"material-icons md-24\">done</mat-icon></span>\n            <span class=\"status-{{ item.invoiceOut }} apps-status\">Invoice Out <mat-icon class=\"material-icons md-24\">done</mat-icon></span>\n            <span class=\"status-{{ item.invoicePaid }} apps-status\">Invoice Paid <mat-icon class=\"material-icons md-24\">done</mat-icon></span>\n          </div>\n        </div>\n      </div>\n      </mat-card>\n    </ng-container>\n  </div>\n  <div class=\"message-space\"></div>\n  <mat-toolbar class=\"whiteboard-message apps-item mat-elevation-z3\">\n    <!-- <div class=\"field-container\" *ngIf=\"loggedUser && loggedUser.isAdmin\" >\n        <mat-form-field appearance=\"outline\">\n          <mat-label>Message</mat-label>\n          <input matInput [(ngModel)]=\"message\">\n        </mat-form-field>\n        <button mat-icon-button color=\"primary\" (click)=\"saveMessage(message)\" >\n          <mat-icon>save</mat-icon>\n        </button>\n    </div> -->\n    <span class=\"whiteboard-message-text\">{{message}}\n      <button mat-icon-button (click)=\"editMessage()\" *ngIf=\"user.user.role.name == 'Administrator'\">\n        <mat-icon>edit</mat-icon>\n      </button>\n    </span>\n  </mat-toolbar>\n</content>\n</div>\n\n","import { SocketService } from './../services/socket.service';\nimport { MessageComponent } from './message/message.component';\nimport { MatDialog } from '@angular/material/dialog';\nimport { User } from './../models/user';\nimport { Observable } from 'rxjs';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport { DataService } from './../data.service';\nimport { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Application } from '../applications/application';\nimport { Users } from '../users/users';\nimport { AuthService } from '../services/auth.service';\n\n@Component({\n  selector: 'app-applications-dashboard',\n  templateUrl: './applications-dashboard.component.html',\n  styleUrls: ['./applications-dashboard.component.scss']\n})\nexport class ApplicationsDashboardComponent implements OnInit, OnDestroy {\n\n  public months = [\n    {display: 'January', value: '201901'},\n    {display: 'Febraury', value: '201902'}\n  ];\n\n  applicatiosOld = [];\n\n  public loggedUser: Users;\n  public message: string;\n  public fullScreen = false;\n  public user: any;\n\n  public topAgent: string;\n  public apps: any[];\n  constructor(\n    public dialog: MatDialog,\n    private dataService: DataService,\n    private authService: AuthService,\n    private socketService: SocketService,\n  ) { }\n\n  ngOnInit() {\n    this.authService.currentUser.subscribe(data => {\n      this.user = data;\n    });\n    this.getMessage();\n    this.getApplications();\n\n    this.socketService.get().subscribe(method => {\n      // console.log(method);\n      if ( typeof this[method] === 'function' ) {\n        this[method]();\n      }\n    });\n\n    this.getOldApps();\n  }\n\n  getApplications() {\n    const where = `{\n      paid_ne: true,\n    }`;\n\n    const query = `\n    query{\n        applications(sort: \"createdAt:desc\", where: ${where}) {\n            id,\n            applicationType,\n            address,\n            approved,\n            createdAt,\n            denied,\n            listingAgreement,\n            offerOut,\n            offerExecuted,\n            closed,\n            moneyIn,\n            price,\n            invoicePaid,\n            invoiceOut,\n            agent {\n                id\n                fullName\n                avatar {\n                  url\n                }\n            }\n        }\n        applicationsConnection {\n          groupBy {\n            agent {\n              key\n              connection {\n                  aggregate {\n                      count\n                  }\n              }\n            }\n          }\n        }\n    }`;\n\n    this.dataService.getData(query).subscribe(res => {\n      this.apps = res.data.applications;\n      const agentStats: [] = res.data.applicationsConnection.groupBy.agent;\n      const stats = [];\n\n      agentStats.forEach((el: any) => {\n        const key = el.key;\n        const count = el.connection.aggregate.count;\n        stats.push({key, count});\n      });\n\n      stats.sort((a, b) => (a.count > b.count) ? -1 : 1);\n      this.topAgent = stats['0'].key;\n    });\n  }\n\n  getMessage() {\n    const query = `query{\n      static(id: \"5e5702eda23dfc62fc1bcf4d\"){\n        whiteBoardMessage\n      }\n    }`;\n    this.dataService.getData(query).subscribe(res => {\n      this.message = res.data.static.whiteBoardMessage;\n    });\n  }\n\n  editMessage() {\n    const dialogRef = this.dialog.open(MessageComponent, {\n      width: '550px',\n      data: {message: this.message}\n    });\n\n    dialogRef.afterClosed().subscribe(res => {\n      this.socketService.send('public', 'getMessage');\n      this.message = res;\n    });\n  }\n\n  openFullScreen() {\n    const element = document.getElementById('full-screen');\n    this.fullScreen = !this.fullScreen;\n    const screenfull = require('screenfull');\n    if (screenfull.isEnabled) {\n      screenfull.toggle(element);\n    }\n  }\n\n  migrateApps() {\n    // this.applicatiosOld.forEach(appOld => {\n    //   console.log(appOld.address);\n    //   this.authService.migrateApp(appOld).subscribe(res => {\n    //     console.log(res);\n    //   });\n    // });\n  }\n\n  async getOldApps(){\n    this.dataService.getAllApps().subscribe(res => {\n      const oldApps: any[] = res;\n      oldApps.forEach(el => {\n        // console.log(el);\n        // const query = `query { users(where: {fullName_contains: \"${el.createBy}\"}) {id, fullName}}`;\n        // this.dataService.getData(query).subscribe(resUser => {\n        //   console.log(el);\n        //   console.log(resUser.data.users[\"0\"]);\n        // });\n      });\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.socketService.closeConnection();\n  }\n}\n","import { DataService } from './../../data.service';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Component, OnInit, Inject } from '@angular/core';\n\n@Component({\n  selector: 'app-message',\n  templateUrl: './message.component.html',\n  styleUrls: ['./message.component.scss']\n})\nexport class MessageComponent implements OnInit {\n  public message = '';\n  public loading: boolean;\n\n\n\n  constructor(\n    private dialogRef: MatDialogRef<MessageComponent>,\n    private dataService: DataService,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n  ) { }\n\n  ngOnInit() {\n    if(this.data){\n      this.message = this.data.message;\n    }\n  }\n\n  onSubmit(){\n    this.loading = true;\n    const appData = `mutation {\n      updateStatic(input: {\n        where: {\n          id: \"5e5702eda23dfc62fc1bcf4d\"\n        },\n        data: {\n          whiteBoardMessage: \"${this.message}\"\n        }\n      }) {\n        static {\n          whiteBoardMessage\n        }\n      }\n    }`;\n\n    this.dataService.updateData(appData).subscribe((res) => {\n      this.loading = false;\n      this.dialogRef.close(this.message);\n    });\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n}\n","<mat-progress-bar mode=\"indeterminate\" *ngIf=\"loading\" class=\"modal-loading\" color=\"warn\"></mat-progress-bar>\n<form (ngSubmit)=\"onSubmit()\" #form=\"ngForm\">\n    <mat-form-field appearance=\"outline\" class=\"full-width\">\n        <mat-label>Message</mat-label>\n        <input matInput [(ngModel)]=\"message\" name=\"message\">\n      </mat-form-field>\n    <button mat-flat-button color=\"primary\">Save</button>\n    <a mat-stroked-button (click)=\"onNoClick()\" color=\"primary\" style=\"margin-left: 10px;\">Cancel</a>\n</form>\n","import { DataService } from './../data.service';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-applications-stats',\n  templateUrl: './applications-stats.component.html',\n  styleUrls: ['./applications-stats.component.scss']\n})\nexport class ApplicationsStatsComponent implements OnInit {\n\n  public stats: any[] = [];\n\n  constructor(\n    private dataService: DataService\n  ) { }\n\n  ngOnInit() {\n    this.getStats();\n  }\n\n  getStats(){\n    const date = new Date();\n    const thisMonth = `${date.getFullYear()}-${('0' + (date.getMonth())).slice(-2)}-01`;\n    console.log(thisMonth);\n    const query = `query{\n        users(where: { applications: {createdAt_gte: \"${thisMonth}\"} }){\n            id\n            fullName\n            avatar{\n              url\n            }\n            applications(sort: \"createdAt:desc\"){\n                id\n                moneyIn\n                approved\n                invoiceOut\n                invoicePaid\n                createdAt\n            }\n        }\n    }`;\n\n    this.dataService.getData(query).subscribe(res => {\n      if (res.data.users.length > 0) {\n        const statsData: any[] = res.data.users;\n        statsData.forEach(element => {\n          // console.log(element);\n          const stats = {\n            id: element.id,\n            name: element.fullName,\n            avatar: element.avatar.length > 0 ? element.avatar['0'].url : '',\n            applications: element.applications.length,\n            moneyIn: element.applications.reduce((total, apps) => (apps.moneyIn === true ? total + 1 : total), 0),\n            approved: element.applications.reduce((total, apps) => (apps.approved === true ? total + 1 : total), 0),\n            invoiceOut: element.applications.reduce((total, apps) => (apps.invoiceOut === true ? total + 1 : total), 0),\n            invoicePaid: element.applications.reduce((total, apps) => (apps.invoicePaid === true ? total + 1 : total), 0),\n          };\n          this.stats.push(stats);\n        });\n        this.stats.sort((a,b) => (a.applications > b.applications) ? -1 : ((b.applications > a.applications) ? 1 : 0));\n        console.log(this.stats);\n      }\n    });\n  }\n\n  place(place){\n    return parseInt(place) + 1;\n  }\n}\n","<div class=\"content\" style=\"padding: 5px;\">\n    <div fxLayout=\"row wrap\" fxLayoutAlign=\"space-evenly stretch\">\n        <ng-container *ngFor=\"let item of stats | keyvalue\">\n            <mat-card class=\"mat-elevation-z4 margin-bottom stats\" style=\"margin: 5px;\" fxFlex *ngIf=\"item.key < 3\" >\n                <div gdAreas=\"avatar content\" gdGap=\"5px\" gdRows=\"auto\" gdColumns=\"105px auto\">\n                    <div gdArea=\"avatar\" class=\"avatar-container\">\n                        <img class=\"avatar_lg\" src=\"https://backend.apartmentsource.com{{item.value.avatar}}\"\n                            *ngIf=\"item.value.avatar\" />\n                        <img class=\"avatar_lg\" src=\"'../../../../assets/avatar.svg\" *ngIf=\"!item.value.avatar\" />\n                    </div>\n                    <div gdArea=\"content\"  gdGap=\"5px\" gdAreas=\"header header | content content2\">\n                        <div gdArea=\"header\" style=\"border-bottom: 1px solid #d4d4d4\">\n                            <h3>{{item.value.name}}</h3>\n                            <span class=\"medal medal-{{item.key}}\">\n                                {{place(item.key)}}\n                                <mat-icon fontSet=\"fa\" fontIcon=\"fa-medal\"></mat-icon>\n                            </span>\n                        </div>\n                        <div gdArea=\"content\">\n                            <div class=\"statistics\">\n                                <span> Applications: </span> <span class=\"float-right\"> {{item.value.applications}} </span> <br />\n                                <span>Money In:  </span> <span class=\"float-right\">{{item.value.moneyIn}}</span><br />\n                                <span>Approved:  </span> <span class=\"float-right\">{{item.value.approved}}</span><br />\n                                <!-- <span>Denied: {{item.denied}}</span><br> -->\n                                <!-- <span>Price: {{item.price}}</span> -->\n                            </div>\n                        </div>\n                        <div gdArea=\"content2\">\n                            <div class=\"statistics\">\n                                <span> Price: </span> <span class=\"float-right\"> {{item.value.applications}} </span> <br />\n                                <span>Invoice Out: </span> <span class=\"float-right\"> {{item.value.invoiceOut}}</span> <br />\n                                <span>Incoice Paid:  </span> <span class=\"float-right\">{{item.value.invoicePaid}}</span><br />\n                                <!-- <span>Denied: {{item.denied}}</span><br> -->\n                                <!-- <span>Price: {{item.price}}</span> -->\n                            </div>\n                        </div>\n                    </div> \n                    \n                </div>\n            </mat-card>\n        </ng-container>\n    </div>\n    <div style=\"padding: 5px 10px;\">\n        <ng-container  *ngFor=\"let item of stats | keyvalue\">\n            <div fxLayout=\"row\" fxLayoutAlign=\"space-evenly stretch\" style=\"margin-bottom: 5px;\" *ngIf=\"item.key > 2\">\n                <div gdAreas=\"number avatar content\" gdGap=\"5px\" gdRows=\"auto\" gdColumns=\"20px 35px auto\"\n                class=\"mat-elevation-z4\" fxFill style=\"background: #fff; padding: 5px\">\n                    <div gdArea=\"number\" class=\"number\">\n                        {{place(item.key)}}\n                    </div>\n                    <div gdArea=\"avatar\" class=\"avatar-container\">\n                        <img class=\"avatar_sm\" src=\"https://backend.apartmentsource.com{{item.value.avatar}}\"\n                            *ngIf=\"item.value.avatar\" />\n                        <img class=\"avatar_sm\" src=\"'../../../../assets/avatar.svg\" *ngIf=\"!item.value.avatar\" />\n                    </div>\n                    <div gdArea=\"content\" class=\"content-table\">\n                        <div style=\"text-align: left;\"><b>{{item.value.name}}</b></div>\n                        <div>Applications: {{item.value.applications}} </div>\n                        <div>Money In: {{item.value.moneyIn}}</div>\n                        <div>Approved: {{item.value.approved}}</div>\n                        <div>Invoice Out: {{item.value.invoiceOut}}</div>\n                        <div>Incoice Paid: {{item.value.invoicePaid}}</div>\n                        <div>Price: {{item.value.applications}} </div>\n                    </div>\n                </div>\n            </div>\n        </ng-container>\n    </div>\n</div>","import { SocketService } from './../services/socket.service';\nimport { AuthService } from './../services/auth.service';\nimport { CreateApplicationComponent } from './create-application/create-application.component';\nimport { DataService } from './../data.service';\nimport { Component, OnInit, ViewChild, OnDestroy } from '@angular/core';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatDialog } from '@angular/material/dialog';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\nimport { Application } from './application';\nimport { Subject } from 'rxjs';\n\n@Component({\n  selector: 'app-applications',\n  templateUrl: './applications.component.html',\n  styleUrls: ['./applications.component.scss']\n})\nexport class ApplicationsComponent implements OnInit, OnDestroy {\n\n  displayedColumns: string[] = [];\n  dataSource: MatTableDataSource<Application>;\n\n  public applications: Application[] = [];\n  public loading = true;\n  public startPage = 0;\n  public limitPage = 10;\n  public totalPages: number;\n  public search = '';\n  public applicationType = 'Leasing';\n  public editing: string[] = [];\n\n  private applicationData: Application = {\n    id: '',\n    date: '',\n    createById: '',\n    createdAt: '',\n    address: '',\n    price: null,\n    moneyIn: null,\n    approved: null,\n    invoiceOut: null,\n    invoicePaid: null,\n    completed: null,\n    offerOut: null,\n    listingAgreement: null,\n    offerExecuted: null,\n    closed: null,\n    appType: '',\n    denied: null,\n  };\n\n  private userId: string;\n\n  searchUpdate = new Subject<string>();\n\n  @ViewChild(MatSort, {static: true}) sort: MatSort;\n\n  constructor(\n    public dialog: MatDialog,\n    private dataService: DataService,\n    private authService: AuthService,\n    private socketService: SocketService,\n  ) {\n    this.dataSource = new MatTableDataSource(this.applications);\n  }\n\n  ngOnInit() {\n    this.displayedColumns = ['address', 'createdAt', 'applicationType', 'price', 'moneyIn', 'approved' , 'denied', 'edit'];\n    this.loading = true;\n    this.dataSource.sort = this.sort;\n\n    const user = this.authService.currentUserValue;\n    this.userId = user.user.id;\n    this.getApplications();\n\n    this.searchUpdate.pipe(\n      debounceTime(400),\n      distinctUntilChanged())\n      .subscribe(value => {\n        this.search = value;\n        this.getApplications();\n      });\n\n    this.socketService.get().subscribe(method => {\n      // console.log(method);\n      if ( typeof this[method] === 'function' ) {\n        this[method]();\n      }\n    });\n  }\n\n  keyUpLoading() {\n    this.loading = true;\n  }\n\n  displayCol(applicationType) {\n    this.loading = true;\n    this.applicationType = applicationType;\n    switch (applicationType) {\n      case 'Leasing':\n        this.displayedColumns = ['address', 'createdAt', 'applicationType', 'price', 'moneyIn', 'approved' , 'denied', 'edit'];\n        break;\n      case 'Listing':\n        this.displayedColumns = ['address', 'createdAt', 'applicationType',\n        'price', 'listingAgreement', 'offerExecuted', 'closed', 'edit'];\n        break;\n      case 'Buying':\n        this.displayedColumns = ['address', 'createdAt', 'applicationType',\n        'price', 'offerOut', 'offerExecuted', 'closed', 'edit'];\n        break;\n      default:\n        break;\n    }\n    this.getApplications();\n  }\n\n  getApplications() {\n    const where = `{\n      agent: \"${this.userId}\",\n      address_contains: \"${this.search}\",\n      applicationType: \"${this.applicationType}\"\n    }`;\n\n    const query = `\n    query{\n        applications(sort: \"createdAt:desc\", start: ${this.startPage}, limit: ${this.limitPage}, where: ${where}) {\n            id,\n            applicationType,\n            address,\n            approved,\n            createdAt,\n            denied,\n            listingAgreement,\n            offerOut,\n            offerExecuted,\n            closed,\n            moneyIn,\n            price,\n            agent {\n                id\n                fullName\n            }\n        }\n        applicationsConnection (where: ${where}) {\n            aggregate {\n                count\n            }\n        }\n    }`;\n\n    this.dataService.getData(query).subscribe(({ data, loading })  => {\n      this.dataSource = new MatTableDataSource<Application>(data.applications);\n      this.totalPages = data.applicationsConnection.aggregate.count;\n      this.loading = false;\n    });\n  }\n\n  createApp(): void {\n    const dialogRef = this.dialog.open(CreateApplicationComponent, {\n      width: '550px',\n      data: {data: this.applicationData, applicationType: this.applicationType}\n    });\n\n    dialogRef.afterClosed().subscribe(res => {\n      this.socketService.send('public', 'getApplications');\n      this.getApplications();\n    });\n  }\n\n  edit(appId) {\n    if (!this.editing.includes(appId)) {\n      this.editing.push(appId);\n    }\n  }\n\n  save(appId) {\n    if (this.editing.includes(appId)) {\n      this.editing.splice( this.editing.indexOf(appId), 1 );\n    }\n  }\n\n  updateApp(app: Application, field) {\n    if (this.editing.includes(app.id)) {\n      this.loading = true;\n      app[field] = !app[field];\n      const appData = `mutation {\n          updateApplication(input: {\n            where: {\n              id: \"${app.id}\"\n            },\n            data: {\n              ${field}: ${app[field]}\n            }\n          }) {\n            application {\n              id\n            }\n          }\n        }`;\n\n      this.dataService.updateData(appData).subscribe(() => {\n        this.socketService.send('public', 'getApplications');\n        this.getApplications();\n      });\n    }\n  }\n\n  paginator(e) {\n    this.loading = true;\n    this.startPage = e.pageIndex !== 0 ? e.pageIndex * e.pageSize : 0;\n    this.limitPage = e.pageSize;\n    this.getApplications();\n  }\n\n  ngOnDestroy(): void {\n    this.socketService.closeConnection();\n  }\n}\n","\n<mat-progress-bar mode=\"indeterminate\" *ngIf=\"loading\" class=\"loading-top\" color=\"warn\"></mat-progress-bar>\n<div class=\"content\">\n  <mat-card style=\"padding: 5px 10px; margin-bottom: 10px; border-radius: 0px;\" class=\"mat-elevation-z1\">\n  <div fxLayout=\"row\" fxLayoutAlign=\"start stretch\" fxLayoutGap=\"10px\">\n    <div fxFlex>\n      <mat-form-field appearance=\"outline\" class=\"no-padding\">\n        <mat-label>Search</mat-label>\n        <input matInput class=\"form-control\" [(ngModel)]=\"search\" \n        type=\"text\" name=\"userQuestion\" id=\"userQuestions\"\n        (ngModelChange)=\"this.searchUpdate.next($event)\" (keyup)=\"keyUpLoading()\" >\n        <button mat-button *ngIf=\"search\" matSuffix mat-icon-button aria-label=\"Clear\" (click)=\"this.searchUpdate.next('')\">\n          <mat-icon>close</mat-icon>\n        </button>\n      </mat-form-field>\n    </div>\n    <div>\n      <mat-button-toggle-group #group=\"matButtonToggleGroup\" value=\"Leasing\" class=\"full-width margin-botton\">\n        <mat-button-toggle value=\"Leasing\" aria-label=\"Text align center\" (click)=\"displayCol('Leasing')\">\n          Leasing\n        </mat-button-toggle>\n        <mat-button-toggle value=\"Listing\" aria-label=\"Text align center\" (click)=\"displayCol('Listing')\">\n          Listing\n        </mat-button-toggle>\n        <mat-button-toggle value=\"Buying\" aria-label=\"Text align center\" (click)=\"displayCol('Buying')\">\n          Buying\n        </mat-button-toggle>\n      </mat-button-toggle-group>\n    </div>\n    <div>\n      <button mat-flat-button class=\"fat-btn bk-gradient\" (click)=\"createApp()\">New Application</button>\n    </div>\n  </div>\n </mat-card>\n  <div class=\"mat-elevation-z2\">\n    <table mat-table [dataSource]=\"dataSource\" matSort>\n\n      <ng-container matColumnDef=\"address\">\n        <th mat-header-cell *matHeaderCellDef> Address </th>\n        <td mat-cell *matCellDef=\"let row\" style=\"width: 15%;\">\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n              {{row.address}}\n          </div>\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"createdAt\">\n        <th mat-header-cell *matHeaderCellDef> Date </th>\n        <td mat-cell *matCellDef=\"let row\" style=\"width: 8%;\">\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n              {{row.createdAt | date:'shortDate' }}\n          </div>\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"applicationType\">\n        <th mat-header-cell *matHeaderCellDef> Type </th>\n        <td mat-cell *matCellDef=\"let row\" style=\"width: 8%;\">\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n            {{row.applicationType}}\n          </div>\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"price\">\n          <th mat-header-cell *matHeaderCellDef> Price </th>\n          <td mat-cell *matCellDef=\"let row\" style=\"width: 8%;\">\n            <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                ${{row.price | number }}\n            </div>\n          </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"offerOut\">\n          <th mat-header-cell *matHeaderCellDef>Offer Out </th>\n          <td mat-cell *matCellDef=\"let row\" style=\"width: 8%;\">\n              <mat-checkbox [(ngModel)]=\"row.offerOut\" color=\"primary\" [disabled]=\"!editing.includes(row.id)\" (click)=\"updateApp(row, 'offerOut')\"></mat-checkbox>\n          </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"listingAgreement\">\n          <th mat-header-cell *matHeaderCellDef>Listing <br> Agreement </th>\n          <td mat-cell *matCellDef=\"let row\" style=\"width: 8%;\">\n            <mat-checkbox [(ngModel)]=\"row.listingAgreement\" color=\"primary\" [disabled]=\"!editing.includes(row.id)\" (click)=\"updateApp(row, 'listingAgreement')\"></mat-checkbox>\n          </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"offerExecuted\">\n          <th mat-header-cell *matHeaderCellDef>Offer <br> Executed </th>\n          <td mat-cell *matCellDef=\"let row\" style=\"width: 8%;\">\n              <mat-checkbox [(ngModel)]=\"row.offerExecuted\" color=\"primary\" [disabled]=\"!editing.includes(row.id)\" (click)=\"updateApp(row, 'offerExecuted')\"></mat-checkbox>\n          </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"closed\">\n          <th mat-header-cell *matHeaderCellDef>Closed </th>\n          <td mat-cell *matCellDef=\"let row\" style=\"width: 8%;\">\n            <mat-checkbox [(ngModel)]=\"row.closed\" color=\"primary\" [disabled]=\"!editing.includes(row.id)\" (click)=\"updateApp(row, 'closed')\"></mat-checkbox>\n          </td>\n        </ng-container>\n\n      <ng-container matColumnDef=\"moneyIn\">\n        <th mat-header-cell *matHeaderCellDef>Money In </th>\n        <td mat-cell *matCellDef=\"let row\" style=\"width: 8%;\">\n            <mat-checkbox [(ngModel)]=\"row.moneyIn\" color=\"primary\" [disabled]=\"!editing.includes(row.id)\" (click)=\"updateApp(row, 'moneyIn')\"></mat-checkbox>\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"approved\">\n        <th mat-header-cell *matHeaderCellDef>Approved </th>\n        <td mat-cell *matCellDef=\"let row\" style=\"width: 8%;\">\n          <mat-checkbox [(ngModel)]=\"row.approved\" color=\"primary\" [disabled]=\"!editing.includes(row.id)\" (click)=\"updateApp(row, 'approved')\"></mat-checkbox>\n        </td>\n      </ng-container>\n\n        <ng-container matColumnDef=\"denied\">\n            <th mat-header-cell *matHeaderCellDef>Denied </th>\n            <td mat-cell *matCellDef=\"let row\" style=\"width: 8%;\">\n              <mat-checkbox [(ngModel)]=\"row.denied\" color=\"primary\" [disabled]=\"!editing.includes(row.id)\" (click)=\"updateApp(row, 'denied')\"></mat-checkbox>\n            </td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"edit\">\n            <th mat-header-cell *matHeaderCellDef> </th>\n            <td mat-cell *matCellDef=\"let row\" style=\"width: 5%;\">\n              <button mat-icon-button *ngIf=\"!editing.includes(row.id)\" (click)=\"edit(row.id)\" ><mat-icon>edit</mat-icon></button>\n              <button mat-icon-button *ngIf=\"editing.includes(row.id)\" (click)=\"save(row.id)\"><mat-icon>save</mat-icon></button>\n              <!-- <button mat-icon-button *ngIf=\"editing.includes(row.id)\" (click)=\"edit(row.id)\"><mat-icon>delete</mat-icon></button> -->\n            </td>\n          </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\">\n      </tr>\n    </table>\n\n    <mat-paginator [length]=\"totalPages\"\n              [pageSize]=\"10\"\n              [pageSizeOptions]=\"[5, 10, 25, 100]\"\n              (page)=\"paginator($event)\">\n    </mat-paginator>\n  </div>\n\n</div>\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA} from '@angular/material/dialog';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { DataService } from '../../data.service';\nimport { AuthService } from './../../services/auth.service';\nimport { Application } from 'src/app/applications/application';\n\n@Component({\n  selector: 'app-create-application',\n  templateUrl: './create-application.component.html',\n  styleUrls: ['./create-application.component.scss']\n})\nexport class CreateApplicationComponent implements OnInit {\n\n  public loading = false;\n  public hide = true;\n  public avatar;\n  public task;\n  public downloadURL;\n  public date: string;\n  public appType: string;\n  private userId: string;\n\n  createApplicationForm = new FormGroup({\n    address: new FormControl('', Validators.required),\n    price: new FormControl('', Validators.required),\n    moneyIn: new FormControl(false),\n    approved: new FormControl(false),\n    denied: new FormControl(false),\n    offerOut: new FormControl(false),\n    listingAgreement: new FormControl(false),\n    offerExecuted: new FormControl(false),\n    closed: new FormControl(false),\n    // invoicePaid: new FormControl(''),\n  });\n\n  public imageSrc;\n\n  constructor(\n    public dialogRef: MatDialogRef<CreateApplicationComponent>,\n    private authService: AuthService,\n    private dataService: DataService,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) { }\n\n  ngOnInit() {\n    const user = this.authService.currentUserValue;\n    this.userId = user.user.id;\n    this.appType = this.data.applicationType;\n    console.log(this.data.applicationType);\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  createApplication() {\n    const appData = `mutation{\n        createApplication(input: {\n        data: {\n          address: \"${this.createApplicationForm.value.address}\",\n          price: ${this.createApplicationForm.value.price},\n          moneyIn: ${this.createApplicationForm.value.moneyIn},\n          approved: ${this.createApplicationForm.value.approved},\n          denied: ${this.createApplicationForm.value.denied},\n          offerOut: ${this.createApplicationForm.value.offerOut},\n          listingAgreement: ${this.createApplicationForm.value.listingAgreement},\n          offerExecuted: ${this.createApplicationForm.value.offerExecuted},\n          closed: ${this.createApplicationForm.value.closed},\n          applicationType: ${this.appType},\n          agent: \"${this.userId}\"\n        }\n      }) {\n        application {\n          address\n          id\n          agent {\n            id\n          }\n        }\n      }\n    }`;\n\n    this.dataService.createData(appData)\n    .subscribe(res => {\n      this.dialogRef.close();\n    });\n  }\n}\n","<mat-progress-bar mode=\"indeterminate\" *ngIf=\"loading\" class=\"modal-loading\"></mat-progress-bar>\n<form [formGroup]=\"createApplicationForm\" (ngSubmit)=\"createApplication()\">\n\n  <div fxLayout=\"row\" fxLayoutAlign=\"center center\">\n    <h1 mat-dialog-title>Submit a new application</h1>\n  </div>\n\n<div mat-dialog-content>\n\n  <mat-button-toggle-group #group=\"matButtonToggleGroup\" [value]=\"appType\" class=\"full-width margin-botton\">\n    <mat-button-toggle value=\"Leasing\" aria-label=\"Text align center\" (click)=\"appType = 'Leasing'\">\n      Leasing\n    </mat-button-toggle>\n    <mat-button-toggle value=\"Listing\" aria-label=\"Text align center\" (click)=\"appType = 'Listing'\">\n      Listing \n    </mat-button-toggle>\n    <mat-button-toggle value=\"Buying\" aria-label=\"Text align center\" (click)=\"appType = 'Buying'\">\n      Buying\n    </mat-button-toggle>\n  </mat-button-toggle-group>\n  <!-- <div class=\"example-selected-value\">Selected value: {{group.value}}</div> -->\n  <!-- <div *ngIf=\"group.value == 'Sales'\">\n    <mat-radio-group class=\"full-width\" value=\"Listing\">\n      <mat-radio-button value=\"Listing\" class=\"margin\" (click)=\"saleType = 'Listing'\">Listing</mat-radio-button>\n      <mat-radio-button value=\"Buying\" class=\"margin\" (click)=\"saleType = 'Buying'\">Buying</mat-radio-button>\n    </mat-radio-group>\n  </div> -->\n\n    <mat-form-field class=\"full-width\">\n        <mat-label>Address</mat-label>\n        <input matInput formControlName=\"address\">\n        <mat-icon matSuffix>name</mat-icon>\n        <mat-error *ngIf=\"createApplicationForm.controls['address'].errors && createApplicationForm.controls['address'].errors.required\">Required</mat-error>\n      </mat-form-field>\n      <div fxLayout=\"column\" fxLayoutAlign=\"start start\" fxLayoutGap=\"10px\">\n          <mat-form-field>\n              <mat-label>Price</mat-label>\n              <span matPrefix>$ &nbsp;</span>\n              <input type=\"number\" matInput formControlName=\"price\">\n            </mat-form-field>\n        <div *ngIf=\"appType == 'Leasing'\">\n          <mat-checkbox color=\"primary\" formControlName=\"moneyIn\">Money In</mat-checkbox><br>\n          <mat-checkbox color=\"primary\" formControlName=\"approved\">Approved</mat-checkbox><br>\n          <mat-checkbox color=\"primary\" formControlName=\"denied\">Denied</mat-checkbox>\n        </div>\n        <div *ngIf=\"appType == 'Listing'\">\n          <mat-checkbox color=\"primary\" formControlName=\"listingAgreement\">Listing Agreement</mat-checkbox><br>\n          <mat-checkbox color=\"primary\" formControlName=\"offerExecuted\">Offer Executed</mat-checkbox><br>\n          <mat-checkbox color=\"primary\" formControlName=\"closed\">Closed</mat-checkbox>\n        </div>\n        <div *ngIf=\"appType == 'Buying'\">\n          <mat-checkbox color=\"primary\" formControlName=\"offerOut\">Offer out</mat-checkbox><br>\n          <mat-checkbox color=\"primary\" formControlName=\"offerExecuted\">Offer Executed</mat-checkbox><br>\n          <mat-checkbox color=\"primary\" formControlName=\"closed\">Closed</mat-checkbox>\n        </div>\n          <!-- <mat-checkbox color=\"primary\" formControlName=\"invoiceOut\">Invoice Out</mat-checkbox>\n          <mat-checkbox color=\"primary\" formControlName=\"invoicePaid\">Invoice Paid</mat-checkbox> -->\n      </div>\n</div>\n\n  <div mat-dialog-actions fxLayout=\"row\" fxLayoutGap=\"20px\" fxLayoutAlign=\"space-evenly center\" class=\"margin-botton\">\n      <button mat-flat-button color=\"primary\" [disabled]=\"!createApplicationForm.valid\" fxFlex>Create\n\n      </button>\n      <a mat-stroked-button (click)=\"onNoClick()\" color=\"primary\" fxFlex>Cancel</a>\n      <!-- <button mat-button [mat-dialog-close]=\"data\" cdkFocusInitial>Ok</button> -->\n  </div>\n</form>\n<!-- <div class=\"loading-spinner\">\n    <mat-progress-spinner\n    class=\"example-margin\"\n    color=\"white\"\n    mode=\"indeterminate\"\n    value=\"50\">\n    </mat-progress-spinner>\n</div> -->\n","import { AngularFireAuth } from '@angular/fire/auth';\nimport { CreateApplicationComponent } from './../create-application/create-application.component';\nimport { DataService } from './../../data.service';\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatDialog } from '@angular/material/dialog';\nimport { map, tap, scan, mergeMap, throttleTime } from 'rxjs/operators';\nimport { Application } from './../application';\n\n\n@Component({\n  selector: 'app-manage-applications',\n  templateUrl: './manage-applications.component.html',\n  styleUrls: ['./manage-applications.component.scss']\n})\nexport class ManageApplicationsComponent implements OnInit {\n\n  displayedColumns: string[] = ['address', 'createDate', 'createBy', 'saleType', 'price', 'offerOut', 'listingAgreement', 'offerExecuted', 'closed', 'moneyIn', 'approved' , 'denied', 'invoiceOut', 'invoicePaid', 'completed'];\n  dataSource: MatTableDataSource<Application>;\n\n  // public users: Users[] = [\n  //   {id: 'ewweewqe', name: 'Marcel Cruz', email: 'marclcruz85@gmail.com', isAdmin: true, isActive: false, teamId: null},\n  // ];\n\n  public applications: Application[] = [];\n  public loading = false;\n  public selectedMonth;\n  public selectedYear;\n\n  public years = [\n    {display: '2019', value: '2019'},\n    {display: '2020', value: '2020'},\n    {display: '2021', value: '2021'},\n  ];\n  public months = [\n    {display: 'January', value: '01'},\n    {display: 'January', value: '02'},\n    {display: 'January', value: '03'},\n    {display: 'January', value: '04'},\n    {display: 'January', value: '05'},\n    {display: 'January', value: '06'},\n    {display: 'January', value: '07'},\n    {display: 'January', value: '08'},\n    {display: 'January', value: '09'},\n    {display: 'January', value: '10'},\n    {display: 'January', value: '11'},\n    {display: 'January', value: '12'},\n  ];\n\n  private applicationData: Application = {\n    id: '',\n    date: '',\n    createById: '',\n    createdAt: '',\n    address: '',\n    price: null,\n    moneyIn: null,\n    approved: null,\n    invoiceOut: null,\n    invoicePaid: null,\n    completed: null,\n    offerOut: null,\n    listingAgreement: null,\n    offerExecuted: null,\n    closed: null,\n    appType: '',\n    denied: null,\n  };\n\n  private userId: string;\n\n  @ViewChild(MatSort, {static: true}) sort: MatSort;\n\n  constructor(\n    public dialog: MatDialog,\n    private dataService: DataService,\n    private afAuth: AngularFireAuth,\n  ) {\n    this.dataSource = new MatTableDataSource(this.applications);\n  }\n\n  ngOnInit() {\n    this.loading = true;\n    const today = new Date();\n    const monthCurr = String(today.getMonth() + 1).padStart(2, '0');\n    const yearCurr = today.getFullYear();\n    console.log(yearCurr);\n    this.selectedMonth = monthCurr.toString();\n    this.selectedYear = yearCurr.toString();\n\n    this.dataSource.sort = this.sort;\n    this.afAuth.user.subscribe(res => {\n      if (res) {\n        this.userId = res.uid;\n        this.getApplications();\n      }\n    });\n  }\n\n  applyFilter(filterValue: string) {\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n  }\n\n  addUser(): void {\n    const dialogRef = this.dialog.open(CreateApplicationComponent, {\n      width: '550px',\n      data: this.applicationData\n    });\n\n    dialogRef.afterClosed().subscribe();\n  }\n\n  // getApplications() {\n  //     this.dataService.getUserApplications(this.userId).subscribe(res => {\n  //       console.log(res);\n  //       this.dataSource = new MatTableDataSource<Application>(res);\n  //       this.loading = false;\n  //     });\n  // }\n  getApplications() {\n    const start = `${this.selectedYear}${this.selectedMonth}01`;\n    const end = `${this.selectedYear}${this.selectedMonth}31`;\n    this.dataService.getAdminApplications(start, end).subscribe(res => {\n      console.log(res);\n      // this.topAgent = res['topAgents']['0'];\n      // const appsData: Application[] = res;\n      // this.applications = appsData;\n      this.dataSource = new MatTableDataSource<Application>(res);\n      this.loading = false;\n    });\n  }\n\n  updateApp(app: Application, field) {\n    // this.loading = true;\n    app[field] = !app[field];\n    this.dataService.updateApp(app).then(res => {\n      console.log('record Updated ', res);\n    }).catch(err => console.log(err));\n  }\n\n  changeMonth(event){\n    this.selectedMonth = event.value;\n    console.log(this.selectedMonth);\n    this.getApplications();\n  }\n\n  changeYear(event){\n    this.selectedYear = event.value;\n    console.log(this.selectedMonth);\n    this.getApplications();\n  }\n}\n","\n<mat-progress-bar mode=\"indeterminate\" *ngIf=\"loading\" class=\"loading-top\"></mat-progress-bar>\n<div class=\"content\">\n  <div fxLayout=\"row\" fxLayoutAlign=\"start start\" fxLayoutGap=\"10px\">\n    <mat-form-field appearance=\"outline\" fxFlex=\"80%\" fxFlexFill>\n      <mat-label>Filter</mat-label>\n      <input matInput (keyup)=\"applyFilter($event.target.value)\">\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\" fxFlex=\"10%\" fxFlexFill>\n        <mat-label>Month</mat-label>\n        <mat-select [(ngModel)]=\"selectedMonth\" name=\"item\" (selectionChange)=\"changeMonth($event)\">\n          <mat-option *ngFor=\"let item of months\" [value]=\"item.value\">\n            {{item.value}}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    <mat-form-field appearance=\"outline\" fxFlex=\"10%\" fxFlexFill>\n        <mat-label>Year</mat-label>\n        <mat-select [(ngModel)]=\"selectedYear\" name=\"item\" (selectionChange)=\"changeYear($event)\">\n          <mat-option *ngFor=\"let item of years\" [value]=\"item.value\">\n            {{item.value}}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n    <!-- <button mat-flat-button color=\"primary\" class=\"fat-btn\" (click)=\"addUser()\">New Application</button> -->\n  </div>\n\n  <div class=\"mat-elevation-z8\">\n    <table mat-table [dataSource]=\"dataSource\" matSort>\n\n      <ng-container matColumnDef=\"address\">\n        <th mat-header-cell *matHeaderCellDef> Address </th>\n        <td mat-cell *matCellDef=\"let row\" style=\"width: 15%;\">\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n              {{row.address}}\n          </div>\n        </td>\n      </ng-container>\n\n        <ng-container matColumnDef=\"createDate\">\n          <th mat-header-cell *matHeaderCellDef> Date </th>\n          <td mat-cell *matCellDef=\"let row\" style=\"width: 15%;\">\n            <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                {{row.createDate}}\n            </div>\n          </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"createBy\">\n          <th mat-header-cell *matHeaderCellDef> Agent </th>\n          <td mat-cell *matCellDef=\"let row\" style=\"width: 15%;\">\n            <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                {{row.createBy}}\n            </div>\n          </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"saleType\">\n          <th mat-header-cell *matHeaderCellDef> Type </th>\n          <td mat-cell *matCellDef=\"let row\" style=\"width: 8%;\">\n            <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n              <span *ngIf=\"row.appType != 'Sale'\">Lease</span>\n              <span *ngIf=\"row.appType == 'Sale'\">{{row.saleType}}</span>\n            </div>\n          </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"price\">\n            <th mat-header-cell *matHeaderCellDef> Price </th>\n            <td mat-cell *matCellDef=\"let row\" style=\"width: 15%;\">\n              <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                  ${{row.price}}\n              </div>\n            </td>\n          </ng-container>\n\n\n          <ng-container matColumnDef=\"offerOut\">\n            <th mat-header-cell *matHeaderCellDef>Offer Out </th>\n            <td mat-cell *matCellDef=\"let row\" style=\"width: 8%;\">\n                <mat-checkbox [(ngModel)]=\"row.offerOut\" color=\"primary\" (click)=\"updateApp(row, 'offerOut')\"  *ngIf=\"row.appType == 'Sale' && row.saleType != 'Listing'\"></mat-checkbox>\n            </td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"listingAgreement\">\n            <th mat-header-cell *matHeaderCellDef>Listing <br> Agreement </th>\n            <td mat-cell *matCellDef=\"let row\" style=\"width: 8%;\">\n              <mat-checkbox [(ngModel)]=\"row.listingAgreement\" color=\"primary\" (click)=\"updateApp(row, 'listingAgreement')\"  *ngIf=\"row.appType == 'Sale' && row.saleType == 'Listing'\"></mat-checkbox>\n            </td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"offerExecuted\">\n            <th mat-header-cell *matHeaderCellDef>Offer <br> Executed </th>\n            <td mat-cell *matCellDef=\"let row\" style=\"width: 8%;\">\n                <mat-checkbox [(ngModel)]=\"row.offerExecuted\" color=\"primary\" (click)=\"updateApp(row, 'offerExecuted')\" *ngIf=\"row.appType == 'Sale'\"></mat-checkbox>\n            </td>\n          </ng-container>\n\n          <ng-container matColumnDef=\"closed\">\n            <th mat-header-cell *matHeaderCellDef>Closed </th>\n            <td mat-cell *matCellDef=\"let row\" style=\"width: 8%;\">\n              <mat-checkbox [(ngModel)]=\"row.closed\" color=\"primary\" (click)=\"updateApp(row, 'closed')\" *ngIf=\"row.appType == 'Sale'\"></mat-checkbox>\n            </td>\n          </ng-container>\n\n      <ng-container matColumnDef=\"moneyIn\">\n        <th mat-header-cell *matHeaderCellDef>Money In </th>\n        <td mat-cell *matCellDef=\"let row\" style=\"width: 15%;\">\n            <mat-checkbox [(ngModel)]=\"row.moneyIn\" color=\"primary\" (click)=\"updateApp(row, 'moneyIn')\"  *ngIf=\"row.appType != 'Sale'\"></mat-checkbox>\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"approved\">\n        <th mat-header-cell *matHeaderCellDef>Approved </th>\n        <td mat-cell *matCellDef=\"let row\">\n          <mat-checkbox [(ngModel)]=\"row.approved\" color=\"primary\" (click)=\"updateApp(row, 'approved')\"  *ngIf=\"row.appType != 'Sale'\"></mat-checkbox>\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"denied\">\n        <th mat-header-cell *matHeaderCellDef>Denied </th>\n        <td mat-cell *matCellDef=\"let row\">\n          <mat-checkbox [(ngModel)]=\"row.denied\" color=\"primary\" (click)=\"updateApp(row, 'denied')\" *ngIf=\"row.appType != 'Sale'\"></mat-checkbox>\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"invoiceOut\">\n          <th mat-header-cell *matHeaderCellDef>Invoice Out </th>\n          <td mat-cell *matCellDef=\"let row\" style=\"width: 15%;\">\n            <mat-checkbox [(ngModel)]=\"row.invoiceOut\" color=\"primary\" (click)=\"updateApp(row, 'invoiceOut')\"></mat-checkbox>\n          </td>\n        </ng-container>\n\n        <ng-container matColumnDef=\"invoicePaid\">\n          <th mat-header-cell *matHeaderCellDef>Invoice <br> Paid </th>\n          <td mat-cell *matCellDef=\"let row\">\n            <mat-checkbox [(ngModel)]=\"row.invoicePaid\" color=\"primary\" (click)=\"updateApp(row, 'invoicePaid')\"></mat-checkbox>\n          </td>\n        </ng-container>\n\n          <ng-container matColumnDef=\"completed\">\n              <th mat-header-cell *matHeaderCellDef>Paid </th>\n              <td mat-cell *matCellDef=\"let row\">\n                <mat-checkbox [(ngModel)]=\"row.completed\" color=\"primary\" (click)=\"updateApp(row, 'completed')\"></mat-checkbox>\n              </td>\n            </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\">\n      </tr>\n    </table>\n\n    <!-- <mat-paginator [pageSizeOptions]=\"[5, 10, 25, 100]\"></mat-paginator> -->\n  </div>\n\n</div>\n","import { Users } from './users/users';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport { Injectable } from '@angular/core';\nimport * as firebase from 'firebase/app';\nimport { environment } from 'src/environments/environment.prod';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private userDetails: firebase.User;\n\n  constructor(\n    private fireAuth: AngularFireAuth,\n  ) {\n      this.fireAuth.authState.subscribe(res => {\n        if (res) {\n          this.userDetails = res;\n        }\n      });\n    }\n\n    getUser() {\n      if (this.userDetails) {\n        return this.userDetails;\n      }\n    }\n\n    login(email: string, password: string) {\n      return this.fireAuth.auth.signInWithEmailAndPassword(email, password);\n    }\n\n    register(user: Users, password: string) {\n      return this.fireAuth.auth.createUserWithEmailAndPassword(user.email, password);\n      // .then(res => {\n      //   user.id = res.user.uid;\n      //   return this.dataService.createUser(user);\n      // }).catch(err => {\n      //   console.log(err);\n      // });\n    }\n\n    forgot(email: string) {\n      return this.fireAuth.auth.sendPasswordResetEmail(email);\n    }\n\n    sendVerificationEmail() {\n      return this.fireAuth.auth.currentUser.sendEmailVerification();\n    }\n\n    signOut() {\n      return this.fireAuth.auth.signOut();\n    }\n}\n","import { Router } from '@angular/router';\nimport { Component, OnInit, NgZone } from '@angular/core';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent implements OnInit {\n\n  constructor(\n    private router: Router,\n    private zone: NgZone\n  ) { }\n\n  ngOnInit() {\n    this.zone.run(() => this.router.navigateByUrl('/dashboard/applications-dashboard'))\n  }\n\n}\n","<app-navigation></app-navigation>\n","import { Users } from './users/users';\nimport { Injectable } from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/firestore';\nimport { Observable } from 'rxjs';\nimport { Application } from './applications/application';\nimport { Apollo } from 'apollo-angular';\nimport gql from 'graphql-tag';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n\n  private user: Users;\n  private userId: string;\n\n  constructor(\n    private afStore: AngularFirestore,\n    private apollo: Apollo,\n  ) {\n  }\n\n  getData(query) {\n    return this.apollo.query<any>({\n      query: gql`${query}`,\n      fetchPolicy: 'network-only',\n      errorPolicy: 'all',\n    });\n  }\n\n  createData(data) {\n    return this.apollo.mutate({\n      mutation: gql`${data}`,\n    });\n  }\n\n  updateData(data) {\n    return this.apollo.mutate({\n      mutation: gql`${data}`,\n    });\n  }\n\n  createUser(user: Users) {\n    return this.afStore.collection('users').doc(user.id).set(user);\n  }\n\n  async createUserAndTeam(user: Users) {\n    return await this.createTeam().then(res => {\n      user.teamId = res.id;\n      this.afStore.collection('users').doc(user.id).set(user);\n    }).catch(err => console.log(err));\n  }\n\n  createTeam() {\n    return this.afStore.collection('teams').add({});\n  }\n\n\n  getUser(userId) {\n    return this.afStore.collection('users').doc<Users>(userId);\n  }\n\n  getUsers() {\n    return this.afStore.collection<Users>('users').valueChanges();\n  }\n\n  // createApp(appData: Application) {\n  //   return this.afStore.collection('applications').doc(appData.id).set(appData);\n  // }\n\n  getApplications(docName: string) {\n    return this.afStore.collection('references').doc<Application>(docName).valueChanges();\n  }\n\n  getAllApps() {\n    return this.afStore.collection('applications').valueChanges();\n  }\n\n  getAdminApplications(start, end) {\n    return this.afStore.collection<Application>('applications', ref =>\n      ref.orderBy('date').startAt(start).endAt(end)\n    ).valueChanges();\n  }\n\n  getUserApplications(userId) {\n    return this.afStore.collection<Application>('applications', ref =>\n      ref.where('createById', '==', userId).where('completed', '==', false)\n    ).valueChanges();\n  }\n\n  getStats(thisMonth: string) {\n    return this.afStore.collection('statistics', ref =>\n      ref.orderBy('statsData.app', 'desc')\n      .where('range', '==', 'monthly')\n      .where('statsData.date', '==', thisMonth)\n    )\n    .valueChanges();\n  }\n\n  updateApp(app: Application) {\n    console.log(app);\n    return this.afStore.collection('applications').doc(app.id).set(app, {merge: true});\n  }\n\n  saveMessage(message: string) {\n    return this.afStore.collection('message').doc('dashboard-message').set({message}, {merge: true});\n  }\n\n  getMessage() {\n    return this.afStore.collection('message').doc<string>('dashboard-message').valueChanges();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../services/auth.service';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport {MatSnackBar} from '@angular/material/snack-bar';\nimport { first } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  styleUrls: ['./forgot-password.component.scss']\n})\nexport class ForgotPasswordComponent implements OnInit {\n\n  forgotForm = new FormGroup({\n    email: new FormControl('', [Validators.required, Validators.email]),\n  });\n\n  constructor(\n    private authService: AuthService,\n    private snackBard: MatSnackBar,\n    private router: Router,\n    ) { }\n\n  ngOnInit() {\n  }\n\n  forgot() {\n    const email = this.forgotForm.value.email;\n\n    this.authService.forgotPassword(email)\n    .pipe(first())\n    .subscribe(\n        data => {\n          // this.presentToast('Please check your emails for a password reset directions');\n          this.snackBard.open('Please check your email for instructions', null, {duration: 3000});\n          this.router.navigate(['/login']);\n        },\n        error => {\n          console.log(error);\n          const errorMessage = error['0'].messages['0'].message;\n          this.snackBard.open(errorMessage, null, {duration: 3000});\n          // this.presentToast(errorMessage);\n          // this.loading = false;\n        });\n  }\n\n}\n","<div class=\"content\" fxLayout=\"row\" fxLayoutAlign=\"space-around center\">\n    <mat-card class=\"mat-elevation-z8\">\n        <form [formGroup]=\"forgotForm\" (ngSubmit)=\"forgot()\">\n              <mat-card-content class=\"ion-padding\">\n                <mat-card-title class=\"ion-text-center full-width\">Forgot Password</mat-card-title>\n                <mat-card-subtitle class=\"ion-text-center full-width\">Recover your password using your email address</mat-card-subtitle>\n                <mat-form-field appearance=\"outline\" class=\"full-width\">\n                  <mat-label>Email</mat-label>\n                  <input matInput formControlName=\"email\">\n                  <mat-icon matSuffix>email</mat-icon>\n                  <!-- <mat-hint>Hint</mat-hint> -->\n                  <mat-error *ngIf=\"forgotForm.controls['email'].errors && forgotForm.controls['email'].errors.required\">Required</mat-error>\n                  <mat-error *ngIf=\"forgotForm.controls['email'].errors && !forgotForm.controls['email'].errors.required\">Please type a valid email address</mat-error>\n                </mat-form-field>\n              </mat-card-content>\n              <mat-card-actions  class=\"padding\">\n                  <div fxLayout=\"row\" fxLayoutGap=\"20px\" fxLayoutAlign=\"space-evenly center\">\n                      <button mat-flat-button color=\"primary\" [disabled]=\"!forgotForm.valid\" fxFlex>Reset</button>\n                      <a mat-stroked-button routerLink=\"/login\" color=\"primary\" fxFlex>Back to Login</a>\n                  </div>\n              </mat-card-actions>\n          </form>\n        </mat-card>\n</div>\n","import {Component, OnInit, ViewChild} from '@angular/core';\nimport {MatSort} from '@angular/material/sort';\nimport {MatTableDataSource} from '@angular/material/table';\n\nexport interface FormData {\n  file: string;\n  name: string;\n  details: string;\n}\n\nconst forms: FormData[] = [\n  {file: 'ar-11', name: 'AR-11', details: 'Alien’s Change of Address Card'},\n  {file: 'n-400', name: 'N-400', details: 'Application for Naturalization'},\n  {file: 'g-28', name: 'G-28', details: 'Notice of Entry of Appearance as Attorney or Accredited Representative'},\n  {file: 'i-131', name: 'I-131', details: 'Application for Travel Document'},\n  {file: 'i-90', name: 'I-90', details: 'Alien’s Change of Address Card'},\n]\n\n@Component({\n  selector: 'app-form-list',\n  templateUrl: './form-list.component.html',\n  styleUrls: ['./form-list.component.scss']\n})\nexport class FormListComponent implements OnInit {\n\n  displayedColumns: string[] = ['name', 'details'];\n  dataSource: MatTableDataSource<FormData>;\n\n  @ViewChild(MatSort, {static: true}) sort: MatSort;\n\n  constructor() {\n    // Assign the data to the data source for the table to render\n    this.dataSource = new MatTableDataSource(forms);\n  }\n\n  ngOnInit() {\n    this.dataSource.sort = this.sort;\n  }\n\n  applyFilter(filterValue: string) {\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n  }\n}\n","<div class=\"content\">\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Filter</mat-label>\n        <input matInput (keyup)=\"applyFilter($event.target.value)\">\n      </mat-form-field>\n\n  <div class=\"mat-elevation-z8\">\n    <table mat-table [dataSource]=\"dataSource\" matSort>\n\n      <!-- Name Column -->\n      <ng-container matColumnDef=\"name\">\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> Name </th>\n          <td mat-cell *matCellDef=\"let row\" style=\"width: 15%;\">\n            <button mat-button routerLink=\"/dashboard/form/{{row.file}}\">{{row.name}}</button>\n          </td>\n        </ng-container>\n\n      <!-- Details Column -->\n      <ng-container matColumnDef=\"details\">\n        <th mat-header-cell *matHeaderCellDef> Details </th>\n        <td mat-cell *matCellDef=\"let row\">{{row.details}}</td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\">\n      </tr>\n    </table>\n\n    <!-- <mat-paginator [pageSizeOptions]=\"[5, 10, 25, 100]\"></mat-paginator> -->\n  </div>\n\n</div>\n","import {NgModule} from '@angular/core';\nimport {ApolloModule, APOLLO_OPTIONS} from 'apollo-angular';\nimport {HttpLinkModule, HttpLink} from 'apollo-angular-link-http';\nimport {InMemoryCache} from 'apollo-cache-inmemory';\n\nconst uri = 'https://backend.apartmentsource.com/graphql'; // <-- add the URL of the GraphQL server here\nexport function createApollo(httpLink: HttpLink) {\n  return {\n    link: httpLink.create({uri}),\n    cache: new InMemoryCache(),\n  };\n}\n\n@NgModule({\n  exports: [ApolloModule, HttpLinkModule],\n  providers: [\n    {\n      provide: APOLLO_OPTIONS,\n      useFactory: createApollo,\n      deps: [HttpLink],\n    },\n  ],\n})\nexport class GraphQLModule {}\n","import { AuthService } from './../services/auth.service';\nimport { first } from 'rxjs/operators';\nimport { Component, OnInit, NgZone } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport {MatSnackBar} from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n\n  public hide = true;\n  private uid: string;\n\n  loginForm = new FormGroup({\n    email: new FormControl('', [Validators.required, Validators.email]),\n    password: new FormControl('', [Validators.required, Validators.minLength(6)]),\n  });\n\n  constructor(\n    private authenticationService: AuthService,\n    private router: Router,\n    private fireAuth: AngularFireAuth,\n    private snackBard: MatSnackBar,\n    private zone: NgZone,\n  ) {\n  }\n\n  ngOnInit() {\n    const currentUser = this.authenticationService.currentUserValue;\n    if (currentUser) {\n      this.router.navigate(['/dashboard']);\n    }\n  }\n\n  login() {\n    const email = this.loginForm.value.email;\n    const password = this.loginForm.value.password;\n\n    this.authenticationService.login(email, password)\n    .pipe(first())\n    .subscribe(\n        data => {\n          // this.router.navigateByUrl(this.returnUrl);\n          this.router.navigate(['/dashboard']).then(() => {\n            // this.loading.dismiss();\n          });\n        },\n        error => {\n          console.log(error);\n          const errorMessage = error['0'].messages['0'].message;\n          this.snackBard.open(errorMessage, null, {duration: 3000});\n          // this.loading.dismiss();\n        });\n  }\n}\n","<div class=\"content\" fxLayout=\"row\" fxLayoutAlign=\"space-around center\">\n    <mat-card class=\"mat-elevation-z8\">\n          <form [formGroup]=\"loginForm\" (ngSubmit)=\"login()\">\n              <mat-card-content class=\"ion-padding\">\n                <mat-card-title class=\"ion-text-center full-width\">Login</mat-card-title>\n                <mat-card-subtitle class=\"ion-text-center full-width\">Using your email address</mat-card-subtitle>\n                <mat-form-field appearance=\"outline\" class=\"full-width\">\n                  <mat-label>Email</mat-label>\n                  <input matInput formControlName=\"email\">\n                  <mat-icon matSuffix>email</mat-icon>\n                  <mat-error *ngIf=\"loginForm.controls['email'].errors && loginForm.controls['email'].errors.required\">Required</mat-error>\n                  <mat-error *ngIf=\"loginForm.controls['email'].errors && !loginForm.controls['email'].errors.required\">Please type a valid email address</mat-error>\n                  <!-- <mat-hint>Hint</mat-hint> -->\n                </mat-form-field>\n                <mat-form-field appearance=\"outline\" color=\"primary\" class=\"full-width\">\n                  <mat-label>Password</mat-label>\n                  <input matInput [type]=\"hide ? 'password' : 'text'\" formControlName=\"password\">\n                  <a mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\"\n                    [attr.aria-pressed]=\"hide\">\n                    <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\n                  </a>\n                  <mat-hint>Password should be at least 6 characters</mat-hint>\n                  <mat-error *ngIf=\"loginForm.controls['password'].errors && loginForm.controls['password'].errors.required\">Required</mat-error>\n                  <mat-error *ngIf=\"loginForm.controls['password'].errors && !loginForm.controls['password'].errors.required\">Password should be at least 6 characters\n                    </mat-error>\n                </mat-form-field>\n\n                <!-- <a mat-flat-button routerLink=\"/forgot-password\">Forgot Password?</a> -->\n              </mat-card-content>\n              <mat-card-actions class=\"padding\">\n                <div fxLayout=\"row\" fxLayoutGap=\"20px\" fxLayoutAlign=\"space-evenly center\">\n                    <button mat-flat-button color=\"primary\" [disabled]=\"!loginForm.valid\" fxFlex>Login</button>\n                    <a mat-stroked-button routerLink=\"/forgot-password\" color=\"primary\" fxFlex>Reset Password</a>\n                </div>\n              </mat-card-actions>\n              </form>\n    </mat-card>\n</div>\n","export class User {\n    jwt: string;\n    user: {\n        id: string;\n        username: string;\n        email: string;\n        fullName: string;\n        blocked: boolean;\n        role: {\n            name: string;\n        };\n        avatar: [{\n            url: string;\n        }]\n    };\n}\n","import { SocketService } from './../services/socket.service';\nimport { User } from './../models/user';\nimport { AuthService } from './../services/auth.service';\nimport { Component } from '@angular/core';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport { Users } from '../users/users';\n\n@Component({\n  selector: 'app-navigation',\n  templateUrl: './navigation.component.html',\n  styleUrls: ['./navigation.component.scss']\n})\nexport class NavigationComponent {\n\n  // public loggedUser: Users;\n  public user: User;\n  public userAvatar: string;\n\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\n    .pipe(\n      map(result => result.matches)\n    );\n\n  constructor(\n    private breakpointObserver: BreakpointObserver,\n    private authService: AuthService,\n    private router: Router,\n    private socketService: SocketService,\n    ) {\n      this.authService.currentUser.subscribe(data => {\n        this.user = data;\n        if (data && data.user && data.user.avatar) {\n          // this.userAvatar = `https://backend.apartmentsource.com//${data.user.avatar.url}`;\n        }\n      });\n\n\n      this.socketService.get().subscribe(method => {\n        // console.log(method);\n        if ( typeof this[method] === 'function' ) {\n          this[method]();\n        }\n      });\n\n      // this.socketService.listenPrivate().subscribe(data => this.realTimeOps(data));\n      // this.socketService.listenPublic().subscribe(data => this.realTimeOps(data));\n    }\n\n    // realTimeOps(msg){\n    //   console.log(msg);\n    //   switch (msg) {\n    //     case 'refreshUi':\n    //       this.authService.logout();\n    //       this.router.navigate(['/login']);\n    //       break;\n    //     default:\n    //       break;\n    //   }\n    // }\n    logout() {\n      this.authService.logout();\n      this.router.navigate(['/login']);\n    }\n}\n","<mat-sidenav-container class=\"sidenav-container\">\n  <mat-sidenav #drawer class=\"sidenav\" fixedInViewport\n      [attr.role]=\"(isHandset$ | async) ? 'dialog' : 'navigation'\"\n      [mode]=\"(isHandset$ | async) ? 'over' : 'side'\"\n      [opened]=\"false\">\n    <mat-toolbar>Menu</mat-toolbar>\n    <mat-nav-list>\n      <div *ngIf=\"user\">\n          <!-- <a mat-list-item routerLink=\"/dashboard/form/ar-11\">Clients</a> -->\n          <a mat-list-item routerLink=\"/dashboard/applications-dashboard\" (click)=\"drawer.close()\">Whiteboard</a>\n          <a mat-list-item routerLink=\"/dashboard/whiteboard\" (click)=\"drawer.close()\">Agent Stats (old)</a>\n          <a mat-list-item routerLink=\"/dashboard/applications-stats\" (click)=\"drawer.close()\">Agent Stats</a>\n          <a mat-list-item routerLink=\"/dashboard/applications\" (click)=\"drawer.close()\">Applications</a>\n          <!-- <a mat-list-item routerLink=\"/dashboard/manage-applications\" (click)=\"drawer.close()\">Applications <span class=\"sub-menu\">(admin)</span></a>\n          <a mat-list-item routerLink=\"/dashboard/users\" (click)=\"drawer.close()\">Users</a> -->\n          <!-- <a mat-list-item routerLink=\"/dashboard/manage-applications\" (click)=\"drawer.close()\" *ngIf=\"user.user.role.name == 'Administrator'\">Applications old <span class=\"sub-menu\">(admin)</span></a> -->\n          <a mat-list-item routerLink=\"/dashboard/applications-admin\" (click)=\"drawer.close()\" *ngIf=\"user.user.role.name == 'Administrator'\">Applications <span class=\"sub-menu\">(admin)</span></a>\n          <a mat-list-item routerLink=\"/dashboard/users\" (click)=\"drawer.close()\" *ngIf=\"user.user.role.name == 'Administrator'\">Users</a>\n      </div>\n    </mat-nav-list>\n  </mat-sidenav>\n  <mat-sidenav-content>\n    <mat-toolbar color=\"primary\">\n      <button\n        type=\"button\"\n        aria-label=\"Toggle sidenav\"\n        mat-icon-button\n        (click)=\"drawer.toggle()\">\n        <mat-icon aria-label=\"Side nav toggle icon\">menu</mat-icon>\n      </button>\n      <span>\n        <!-- Dashboard -->\n      </span>\n      <span class=\"spacer\"></span>\n      <button mat-icon-button (click)=\"logout()\" ><mat-icon>exit_to_app</mat-icon></button>\n    </mat-toolbar>\n    <!-- Add Content Here -->\n    <router-outlet>\n    </router-outlet>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n\n<!-- <mat-toolbar color=\"primary\">\n  <span>footer</span>\n</mat-toolbar> -->\n\n","import { Users } from '../users/users';\nimport { DataService } from './../data.service';\nimport { Router } from '@angular/router';\nimport { AuthService } from './../auth.service';\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n\n  public hide = true;\n\n  private userData: Users = {\n    avatar: '',\n    id: '',\n    name: '',\n    email: '',\n    isAdmin: null,\n    isActive: null,\n    teamId: null,\n  };\n\n  registerForm = new FormGroup({\n    name: new FormControl('', Validators.required),\n    email: new FormControl('', [Validators.required, Validators.email]),\n    password: new FormControl('', [Validators.required, Validators.minLength(6)]),\n  });\n\n  constructor(\n    private authService: AuthService,\n    private snackBard: MatSnackBar,\n    private router: Router,\n    private dataService: DataService,\n  ) { }\n\n  ngOnInit() {\n  }\n\n  register() {\n    this.userData.email = this.registerForm.value.email;\n    const password = this.registerForm.value.password;\n    this.userData.name = this.registerForm.value.name;\n    this.authService.register(this.userData, password)\n    .then(res => {\n      console.log(res);\n      this.userData.id = res.user.uid;\n      this.userData.name = this.registerForm.value.name;\n      this.userData.email = res.user.email;\n      // this.userData.isAdmin = true;\n      this.dataService.createUser(this.userData).then(() => {\n        this.snackBard.open('New Account have been created, please login using your credentials', null, {duration: 3000});\n        this.router.navigate(['/dashboard/users']);\n      }).catch(err => {\n        this.snackBard.open(err, null, {duration: 3000});\n      });\n    })\n    .catch(err => {\n      console.log(err);\n      let message: string;\n      switch (err.code) {\n        case 'auth/invalid-email':\n          message = 'Invalid email address';\n          break;\n        case 'auth/user-not-found':\n          message = 'Incorrect email address or password';\n          break;\n        default:\n          message = err.message;\n      }\n      this.snackBard.open(message, null, {duration: 3000});\n    });\n  }\n}\n","<div class=\"content\" fxLayout=\"row\" fxLayoutAlign=\"space-around center\">\n    <mat-card class=\"mat-elevation-z2\">\n        <form [formGroup]=\"registerForm\" (ngSubmit)=\"register()\">\n            <mat-card-content class=\"ion-padding\">\n              <mat-card-title class=\"ion-text-center full-width\">Register</mat-card-title>\n              <mat-card-subtitle class=\"ion-text-center full-width\">Using your email address</mat-card-subtitle>\n              <mat-form-field appearance=\"outline\" class=\"full-width\">\n                  <mat-label>Name</mat-label>\n                  <input matInput formControlName=\"name\">\n                  <mat-icon matSuffix>name</mat-icon>\n                  <mat-error *ngIf=\"registerForm.controls['email'].errors && registerForm.controls['email'].errors.required\">Required</mat-error>\n                </mat-form-field>\n              <mat-form-field appearance=\"outline\" class=\"full-width\">\n                <mat-label>Email</mat-label>\n                <input matInput formControlName=\"email\">\n                <mat-icon matSuffix>email</mat-icon>\n\n                <mat-error *ngIf=\"registerForm.controls['email'].errors && registerForm.controls['email'].errors.required\">Required</mat-error>\n                <mat-error *ngIf=\"registerForm.controls['email'].errors && !registerForm.controls['email'].errors.required\">Please type a valid email address</mat-error>\n              </mat-form-field>\n              <mat-form-field appearance=\"outline\" color=\"primary\" class=\"full-width\">\n                <mat-label>Password</mat-label>\n                <input matInput [type]=\"hide ? 'password' : 'text'\" formControlName=\"password\">\n                <a mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\"\n                  [attr.aria-pressed]=\"hide\">\n                  <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\n                </a>\n                <mat-hint>Password should be at least 6 characters</mat-hint>\n                <mat-error *ngIf=\"registerForm.controls['password'].errors && registerForm.controls['password'].errors.required\">Required</mat-error>\n                <mat-error *ngIf=\"registerForm.controls['password'].errors && !registerForm.controls['password'].errors.required\">Password should be at least 6 characters\n                  </mat-error>\n              </mat-form-field>\n            </mat-card-content>\n            <mat-card-actions  class=\"padding\">\n                <div fxLayout=\"row\" fxLayoutGap=\"20px\" fxLayoutAlign=\"space-evenly center\">\n                    <button mat-flat-button color=\"primary\" [disabled]=\"!registerForm.valid\" fxFlex>Register</button>\n                    <!-- <a mat-stroked-button routerLink=\"/login\" color=\"primary\" fxFlex>Back to Login</a> -->\n                </div>\n            </mat-card-actions>\n          </form>\n          </mat-card>\n</div>\n","import { AuthService } from './auth.service';\nimport { Injectable } from '@angular/core';\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthGuard implements CanActivate {\n    constructor(\n        private router: Router,\n        private authenticationService: AuthService\n    ) { }\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n        const currentUser = this.authenticationService.currentUserValue;\n        if (currentUser) {\n            // logged in so return true\n            return true;\n        }\n\n        // not logged in so redirect to login page with the return url\n        this.router.navigate(['/login'], { queryParams: { returnUrl: state.url } });\n        return false;\n    }\n}\n","import { Router } from '@angular/router';\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject,Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { User } from './../models/user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private currentUserSubject: BehaviorSubject < User > ;\n  public currentUser: Observable < User > ;\n  public user: User;\n\n  constructor(\n    private http: HttpClient,\n  ) {\n    this.currentUserSubject = new BehaviorSubject < User > (JSON.parse(localStorage.getItem('currentUser')));\n    this.currentUser = this.currentUserSubject.asObservable();\n  }\n\n  public get currentUserValue(): User {\n    return this.currentUserSubject.value;\n  }\n\n  login(username: string, pw: string) {\n    return this.http.post < any > ('https://backend.apartmentsource.com/auth/local', {\n        identifier: username,\n        password: pw\n      })\n      .pipe(map(user => {\n        // store user details and jwt token in local storage to keep user logged in between page refreshes\n        localStorage.setItem('currentUser', JSON.stringify(user));\n        this.currentUserSubject.next(user);\n        return user;\n      }));\n  }\n\n  forgotPassword(emailAddress: string) {\n    return this.http.post < any > ('https://backend.apartmentsource.com/auth/forgot-password', {\n        email: emailAddress,\n        url: 'https://backend.apartmentsource.com/admin/plugins/users-permissions/auth/reset-password'\n      })\n      .pipe(map(user => {\n        return user;\n      }));\n  }\n\n  reset(code: string, pw: string, pwcnf: string) {\n    return this.http.post < any > ('https://backend.apartmentsource.com/auth/reset-password', {\n        code,\n        password: pw,\n        passwordConfirmation: pwcnf\n      })\n      .pipe(map(user => {\n        // store user details and jwt token in local storage to keep user logged in between page refreshes\n        localStorage.setItem('currentUser', JSON.stringify(user));\n        this.currentUserSubject.next(user);\n        return user;\n      }));\n  }\n\n  createUser(user: User, password) {\n    return this.http.post('https://backend.apartmentsource.com/users', {\n      fullName: user.user.fullName,\n      username: user.user.username,\n      email: user.user.email,\n      blocked: user.user.blocked,\n      password,\n    }).pipe(map(newUser => {\n      return newUser;\n    }));\n  }\n\n  updateUser(user: User, password) {\n    const roleId = user.user.role.name === 'Administrator' ? '5dc49d9292e8e019a58a5f74' : '5dc49d9292e8e019a58a5f75';\n    return this.http.put(`https://backend.apartmentsource.com/users/${user.user.id}`, {\n      fullName: user.user.fullName,\n      username: user.user.username,\n      email: user.user.email,\n      blocked: user.user.blocked,\n      ...(password && password),\n      role: {\n        _id: roleId\n      }\n    }).pipe(map(newUser => {\n      return newUser;\n    }));\n  }\n\n  uploadAvatar(avatar) {\n    let headers = new HttpHeaders();\n    headers = headers.set('Content-Type', 'multipart/form-data');\n    return this.http.post('https://backend.apartmentsource.com/upload', avatar);\n  }\n\n  logout() {\n    // remove user from local storage to log user out\n    localStorage.removeItem('currentUser');\n    this.currentUserSubject.next(null);\n  }\n\n  migrateApp(app) {\n    return this.http.post('https://backend.apartmentsource.com/applications', app).pipe(map(newUser => {\n      return newUser;\n    }));\n  }\n\n}\n","import { AuthService } from './auth.service';\nimport { User } from './../models/user';\nimport { Injectable, NgModule } from '@angular/core';\nimport { Socket } from 'ngx-socket-io';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class SocketService {\n\n  constructor(\n    private socket: Socket,\n    private authService: AuthService\n  ) {\n    // this.connect();\n    // super({ url: 'https://backend.apartmentsource.com', options: {query: {userId: '231231232313'}} });\n   }\n\n  // listenPublic() {\n  //   return this.socket.fromEvent('serverToClient').pipe(map( data => data ));\n  // }\n\n  // listenPrivate() {\n  //   const currentUser = this.authService.currentUserValue;\n  //   if (currentUser) {\n  //     return this.socket.fromEvent(`${currentUser.user.id}`).pipe(map( data => data ));\n  //   }\n  // }\n\n  send(to, method) {\n    const msg = {to, method}\n    this.socket.emit('emit', msg);\n  }\n\n  get() {\n    return this.socket.fromEvent<any>('public').pipe(map( data => {\n      const currentUser = this.authService.currentUserValue.user.id;\n      // console.log(data);\n      if (data.to === 'public' || data.to === currentUser) {\n        return data.method;\n      }\n    }));\n  }\n\n  // getPrivate() {\n  //   const currentUser = this.authService.currentUserValue;\n  //   if (currentUser) {\n  //     return this.socket.fromEvent(`${currentUser.user.id}`).pipe(map( data => console.log(data) ));\n  //   }\n  // }\n\n  // emit(msg) {\n  //   this.socket.emit('clientToServer', msg);\n  // }\n\n  closeConnection() {\n    return this.socket.removeListener('public');\n  }\n}\n","import { SocketService } from './../../services/socket.service';\nimport { User } from './../../models/user';\nimport { Users } from '../users';\nimport { Component, OnInit, Inject, ViewChild } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { DataService } from './../../data.service';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../../services/auth.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { AngularFireStorage } from '@angular/fire/storage';\nimport { finalize } from 'rxjs/operators';\nimport * as firebase from 'firebase/app';\nimport { environment } from 'src/environments/environment.prod';\n\n@Component({\n  selector: 'app-create-user',\n  templateUrl: './create-user.component.html',\n  styleUrls: ['./create-user.component.scss']\n})\nexport class CreateUserComponent implements OnInit {\n\n  @ViewChild('avatarInput') avatarInput;\n  public files: Set<File> = new Set();\n\n  public loading = false;\n  public update = false;\n  public hide = true;\n  public avatar;\n  public task;\n  public downloadURL;\n  public adminChanged = false;\n  public blokedChanged = false;\n  private userData: Users = {\n    avatar: '',\n    id: '',\n    name: '',\n    email: '',\n    isAdmin: null,\n    isActive: true,\n    teamId: null,\n  };\n\n\n  public user: User = {\n    jwt: null,\n    user: {\n      id: null,\n      fullName: '',\n      username: '',\n      email: '',\n      blocked: null,\n      role: {\n        name: '',\n      },\n      avatar: [{\n        url: '',\n      }]\n    }\n  };\n\n  private secondFireBase;\n\n  public createUserForm: FormGroup;\n  public imageSrc;\n\n  constructor(\n    public dialogRef: MatDialogRef < CreateUserComponent > ,\n    private snackBard: MatSnackBar,\n    private router: Router,\n    private dataService: DataService,\n    private afStorage: AngularFireStorage,\n    private authService: AuthService,\n    private socketService: SocketService,\n    @Inject(MAT_DIALOG_DATA) public data: User\n  ) {}\n\n  ngOnInit() {\n    // console.log(this.data.user);\n    if ( this.data && this.data.user) {\n      if ( this.data.user.avatar.length > 0 || !this.data.user.avatar === undefined) {\n        this.imageSrc = `https://backend.apartmentsource.com${this.data.user.avatar['0'].url}`;\n      }\n      this.update = this.data ? true : false;\n      this.user.user.id = this.data ? this.data.user.id : null;\n      this.user.user.fullName = this.data ? this.data.user.fullName : '';\n      this.user.user.email = this.data ? this.data.user.email : '';\n      this.user.user.role.name = this.data.user.role.name;\n      this.user.user.blocked = this.data.user.blocked;\n    }\n\n    const passwordValidators = !this.update ? [Validators.required , Validators.minLength(6)] : [Validators.minLength(6)] ;\n    this.createUserForm = new FormGroup({\n      fullName: new FormControl(this.user.user.fullName, Validators.required),\n      email: new FormControl({value: this.user.user.email, disabled: this.update}, [Validators.required, Validators.email]),\n      password: new FormControl(null, passwordValidators),\n      isAdmin: new FormControl(this.user.user.role.name  === 'Administrator' ? true : false),\n      isBloked: new FormControl(this.user.user.blocked ? true : false),\n    });\n  }\n\n  createUser() {\n    this.loading = true;\n    if (this.update) {\n      this.updateUser();\n      return;\n    }\n\n    // user.user = {} as null;\n    this.user.user.fullName = this.createUserForm.value.fullName;\n    this.user.user.email = this.createUserForm.value.email;\n    this.user.user.username = this.createUserForm.value.email;\n    this.user.user.blocked = this.createUserForm.value.isBloked ? true : false;\n    const password = this.createUserForm.value.password;\n    this.authService.createUser(this.user, password).subscribe(\n      data => {\n        this.user.user.id = data['id'];\n        this.updateUser();\n        // console.log(data);\n      },\n      err => {\n        console.log(err);\n        const erroMsg = err['0'].messages['0'].message;\n        this.snackBard.open(erroMsg, null, {\n            duration: 3000\n        });\n      });\n  }\n\n  updateUser() {\n    this.user.user.role = {\n      name: this.createUserForm.value.isAdmin === true ? 'Administrator' : '',\n    };\n    this.user.user.email = this.createUserForm.value.email;\n    this.user.user.username = this.createUserForm.value.email;\n    this.user.user.fullName = this.createUserForm.value.fullName;\n    const password = this.createUserForm.value.password;\n    this.user.user.blocked = this.createUserForm.value.isBloked ? true : false;\n    this.authService.updateUser(this.user, password).subscribe(\n      data => {\n        if (this.avatar) {\n          this.uploadAvatar(data);\n        } else {\n          this.closeRefresh();\n        }\n      },\n      err => {\n        console.log(err);\n        const erroMsg = err['0'].messages['0'].message;\n        this.snackBard.open(erroMsg, null, {\n            duration: 3000\n        });\n      });\n  }\n\n  uploadAvatar(userData) {\n      const formData = new FormData();\n      formData.append('files', this.avatar, this.avatar.name);\n      formData.append('refId', userData.id);\n      formData.append('ref', 'user');\n      formData.append('source', 'users-permissions');\n      formData.append('field', 'avatar');\n\n      this.authService.uploadAvatar(formData).subscribe( data => {\n        // console.log(data);\n        this.closeRefresh();\n      },\n      error => {\n        console.log(error);\n      });\n  }\n\n  preview(files: FileList): void {\n    if (files) {\n      this.avatar = files.item(0);\n\n      const reader = new FileReader();\n      reader.onload = e => {\n        this.imageSrc = reader.result;\n      };\n      reader.readAsDataURL(this.avatar);\n    }\n  }\n\n  closeRefresh() {\n    // const msgs = [];\n\n    // if (this.adminChanged || this.blokedChanged) {\n    //   msgs.push({ to: this.user.user.id, body: 'refreshUi'});\n    // }\n    // msgs.push({ to: '', body: 'getUsers'});\n\n    // msgs.forEach( msg => {\n    //     this.socketService.emit(msg);\n    //   }\n    // );\n    this.socketService.send('public', 'getUsers');\n    if (this.adminChanged || this.blokedChanged) {\n      this.socketService.send(this.user.user.id, 'logout');\n    }\n    this.loading = false;\n    this.dialogRef.close();\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n}\n","<mat-progress-bar mode=\"indeterminate\" *ngIf=\"loading\" class=\"modal-loading\"></mat-progress-bar>\n  <form #avatarUpload (ngSubmit)=\"uploadAvatar($event)\" >\n  <div fxLayout=\"row\" fxLayoutAlign=\"center center\">\n      <div class=\"image-upload\">\n          <label for=\"file-input\">\n              <img class=\"avatar_md\" [src]=\"imageSrc || '../../../assets/avatar.svg'\" alt=\"your image\" />\n          </label>\n          <input id=\"file-input\" #avatarInput type='file' (change)=\"preview($event.target.files);\"/>\n          <!-- <input hidden id=\"file-input\" type='file' (change)=\"preview($event);\" formControlName=\"avatar\" value=''/> -->\n      </div>\n  </div>\n  <!-- <input type=\"submit\" value=\"upload\"> -->\n  <div fxLayout=\"row\" fxLayoutAlign=\"center center\">\n    <h1 mat-dialog-title>{{ update ? 'Update this User' : 'Create a new User'}}</h1>\n  </div>\n</form>\n<form [formGroup]=\"createUserForm\" (ngSubmit)=\"createUser()\">\n<div mat-dialog-content>\n    <mat-form-field appearance=\"outline\" class=\"full-width\">\n        <mat-label>Name</mat-label>\n        <input matInput formControlName=\"fullName\">\n        <mat-icon matSuffix>name</mat-icon>\n        <mat-error *ngIf=\"createUserForm.controls['email'].errors && createUserForm.controls['email'].errors.required\">Required</mat-error>\n      </mat-form-field>\n    <mat-form-field appearance=\"outline\" class=\"full-width\">\n      <mat-label>Email</mat-label>\n      <input matInput formControlName=\"email\">\n      <mat-icon matSuffix>email</mat-icon>\n\n      <mat-error *ngIf=\"createUserForm.controls['email'].errors && createUserForm.controls['email'].errors.required\">Required</mat-error>\n      <mat-error *ngIf=\"createUserForm.controls['email'].errors && !createUserForm.controls['email'].errors.required\">Please type a valid email address</mat-error>\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\" color=\"primary\" class=\"full-width\">\n      <mat-label>Password</mat-label>\n      <input matInput [type]=\"hide ? 'password' : 'text'\" formControlName=\"password\">\n      <a mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\"\n        [attr.aria-pressed]=\"hide\">\n        <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\n      </a>\n      <mat-hint>Password should be at least 6 characters</mat-hint>\n      <mat-error *ngIf=\"createUserForm.controls['password'].errors && createUserForm.controls['password'].errors.required\">Required</mat-error>\n      <mat-error *ngIf=\"createUserForm.controls['password'].errors && !createUserForm.controls['password'].errors.required\">Password should be at least 6 characters\n        </mat-error>\n    </mat-form-field>\n    <div class=\"full-width\">\n      <section class=\"slide-toggle\">\n        <mat-slide-toggle formControlName=\"isAdmin\" (change)=\"adminChanged = !adminChanged\">\n            Administrator\n        </mat-slide-toggle>\n      </section>\n    </div>\n    <div class=\"full-width\">\n      <section class=\"slide-togglen\">\n        <mat-slide-toggle formControlName=\"isBloked\" (change)=\"blokedChanged = !blokedChanged\" >\n            Blocked\n        </mat-slide-toggle>\n      </section>\n    </div>\n\n</div>\n  <div mat-dialog-actions fxLayout=\"row\" fxLayoutGap=\"20px\" fxLayoutAlign=\"space-evenly center\" class=\"margin-botton\">\n      <button mat-flat-button color=\"primary\" [disabled]=\"!createUserForm.valid\" fxFlex *ngIf=\"!update\" >Create</button>\n      <button mat-flat-button color=\"primary\" [disabled]=\"!createUserForm.valid\" fxFlex *ngIf=\"update\" >Update</button>\n      <a mat-stroked-button (click)=\"onNoClick()\" color=\"primary\" fxFlex>Cancel</a>\n      <!-- <button mat-button [mat-dialog-close]=\"data\" cdkFocusInitial>Ok</button> -->\n  </div>\n</form>\n<!-- <div class=\"loading-spinner\">\n    <mat-progress-spinner\n    class=\"example-margin\"\n    color=\"white\"\n    mode=\"indeterminate\"\n    value=\"50\">\n    </mat-progress-spinner>\n</div> -->\n","import { SocketService } from './../services/socket.service';\nimport { User } from './../models/user';\nimport { DataService } from './../data.service';\nimport { CreateUserComponent } from './create-user/create-user.component';\nimport { Users } from './users';\nimport { Component, OnInit, ViewChild, OnDestroy } from '@angular/core';\nimport { MatSort } from '@angular/material/sort';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatDialog } from '@angular/material/dialog';\nimport { map, tap, scan, mergeMap, throttleTime } from 'rxjs/operators';\nimport { Apollo } from 'apollo-angular';\nimport gql from 'graphql-tag';\nimport { Subscription } from 'rxjs';\nimport { Socket } from 'ngx-socket-io';\n\n@Component({\n  selector: 'app-users',\n  templateUrl: './users.component.html',\n  styleUrls: ['./users.component.scss']\n})\nexport class UsersComponent implements OnInit, OnDestroy {\n\n  displayedColumns: string[] = ['fullName', 'email', 'role', 'blocked', 'edit'];\n  dataSource: MatTableDataSource<User>;\n\n  // public users: Users[] = [\n  //   {id: 'ewweewqe', name: 'Marcel Cruz', email: 'marclcruz85@gmail.com', isAdmin: true, isActive: false, teamId: null},\n  // ];\n\n  public users: User[] = [];\n  public loading = false;\n  private queryUsers: Subscription;\n  private realTimeOp;\n\n  private userData: Users = {\n    avatar: '',\n    id: '',\n    name: '',\n    email: '',\n    isAdmin: null,\n    isActive: null,\n    teamId: null,\n  };\n\n  @ViewChild(MatSort, {static: true}) sort: MatSort;\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\n\n  constructor(\n    public dialog: MatDialog,\n    private dataService: DataService,\n    private apollo: Apollo,\n    // private socket: Socket,\n    private socketService: SocketService,\n  ) {\n    // Assign the data to the data source for the table to render\n    this.dataSource = new MatTableDataSource(this.users);\n  }\n\n  ngOnInit() {\n    this.dataSource.sort = this.sort;\n    this.getUsers();\n\n    this.socketService.get().subscribe(method => {\n      if ( typeof this[method] === 'function' ) {\n        this[method]();\n      }\n    });\n    // this.socketService.listenPrivate().subscribe(data => this.realTimeOps(data));\n    // this.socketService.listenPublic().subscribe(data => this.realTimeOps(data));\n  }\n\n  // realTimeOps(msg) {\n  //   console.log(msg);\n  //   switch (msg) {\n  //     case 'getUsers':\n  //       this.getUsers();\n  //       break;\n  //     default:\n  //       break;\n  //   }\n  // }\n\n  applyFilter(filterValue: string) {\n    this.dataSource.filter = filterValue.trim().toLowerCase();\n  }\n\n  addUser(): void {\n    const dialogRef = this.dialog.open(CreateUserComponent, {\n      width: '550px',\n      data: null\n    });\n\n    dialogRef.afterClosed().subscribe();\n  }\n\n  updateUser(user: User): void {\n    const dialogRef = this.dialog.open(CreateUserComponent, {\n      width: '550px',\n      data: {user}\n    });\n\n    dialogRef.afterClosed().subscribe();\n  }\n\n  getUsers() {\n    this.queryUsers = this.apollo.query<any>({\n      query: gql`\n        query {\n          users {\n            id,\n            fullName,\n            username,\n            email,\n            blocked,\n            role {\n              name\n            },\n            avatar {\n              url\n            }\n          }\n        }`,\n        fetchPolicy: 'network-only',\n        errorPolicy: 'all',\n    })\n      .subscribe(({ data, loading }) => {\n        // console.log(data);\n        this.dataSource = new MatTableDataSource<User>(data.users);\n        this.dataSource.paginator = this.paginator;\n        // console.log(this.dataSource);\n        this.queryUsers.unsubscribe();\n      });\n  }\n\n  ngOnDestroy() {\n    this.queryUsers.unsubscribe();\n    this.socketService.closeConnection();\n  }\n}\n","\n<mat-progress-bar mode=\"indeterminate\" *ngIf=\"loading\" class=\"loading-top\"></mat-progress-bar>\n<div class=\"content\">\n  <mat-card style=\"padding: 5px 10px; margin-bottom: 10px; border-radius: 0px;\" class=\"mat-elevation-z1\">\n  <div fxLayout=\"row\" fxLayoutAlign=\"start start\" fxLayoutGap=\"10px\">\n    <mat-form-field appearance=\"outline\" class=\"no-padding\">\n      <mat-label>Filter</mat-label>\n      <input matInput (keyup)=\"applyFilter($event.target.value)\">\n    </mat-form-field>\n    <button mat-flat-button class=\"fat-btn bk-gradient\" (click)=\"addUser()\">Add User</button>\n  </div>\n</mat-card>\n  <div class=\"mat-elevation-z8\">\n    <table mat-table [dataSource]=\"dataSource\" matSort>\n\n      <!-- Name Column -->\n      <ng-container matColumnDef=\"fullName\">\n        <th mat-header-cell *matHeaderCellDef> Name </th>\n        <td mat-cell *matCellDef=\"let row\" style=\"width: 15%;\">\n          <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n              <img class=\"avatar_sm\" src=\"https://backend.apartmentsource.com{{row.avatar['0'].url}}\" *ngIf=\"row.avatar.length > 0 || !row.avatar == undefined\" />\n              <img class=\"avatar_sm\" src=\"'../../../../assets/avatar.svg\" *ngIf=\"row.avatar.length == 0\" />\n              {{row.fullName}}\n          </div>\n        </td>\n      </ng-container>\n\n      <!--Email Column -->\n      <ng-container matColumnDef=\"email\">\n        <th mat-header-cell *matHeaderCellDef>Email </th>\n        <td mat-cell *matCellDef=\"let row\" style=\"width: 15%;\">\n          {{row.email}}\n        </td>\n      </ng-container>\n\n      <!-- isAdmin Column -->\n      <ng-container matColumnDef=\"role\">\n        <th mat-header-cell *matHeaderCellDef>Admin </th>\n        <td mat-cell *matCellDef=\"let row\">\n          <mat-checkbox [ngModel]=\"row.role.name == 'Administrator' ? true : false\" color=\"primary\" disabled></mat-checkbox>\n        </td>\n      </ng-container>\n\n            <!-- isAdmin Column -->\n            <ng-container matColumnDef=\"blocked\">\n              <th mat-header-cell *matHeaderCellDef>Blocked </th>\n              <td mat-cell *matCellDef=\"let row\">\n                <mat-checkbox [ngModel]=\"row.blocked\" color=\"primary\" disabled></mat-checkbox>\n              </td>\n            </ng-container>\n\n      <!-- isAdmin Column -->\n      <ng-container matColumnDef=\"edit\" class=\"edit-table\">\n        <th mat-header-cell *matHeaderCellDef> </th>\n        <td mat-cell *matCellDef=\"let row\">\n          <button mat-icon-button (click)=\"updateUser(row)\"><mat-icon>edit</mat-icon></button>\n        </td>\n      </ng-container>\n\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\">\n      </tr>\n    </table>\n\n    <mat-paginator \n      [pageSize]=\"10\"\n      [pageSizeOptions]=\"[5, 10, 25, 100]\" \n      showFirstLastButtons></mat-paginator>\n    <!-- <mat-paginator [pageSizeOptions]=\"[5, 10, 25, 100]\"></mat-paginator> -->\n  </div>\n\n</div>\n","import { DataService } from './../data.service';\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-whiteboard',\n  templateUrl: './whiteboard.component.html',\n  styleUrls: ['./whiteboard.component.scss']\n})\nexport class WhiteboardComponent implements OnInit {\n\n  public stats = [];\n\n  constructor(\n    private dataService: DataService\n  ) { }\n\n  ngOnInit() {\n    this.getStats();\n  }\n\n  getStats() {\n    const today = new Date();\n    const year = today.getFullYear();\n    const month = ('0' + (today.getMonth() + 1)).slice(-2);\n    const thisMonth = `${year}${month}`;\n    // const thisMonth = '201908';\n\n    this.dataService.getStats(thisMonth).subscribe(res => {\n      this.stats = res;\n      console.log(res);\n    });\n  }\n}\n","<div class=\"content\">\n    <div fxLayout=\"row wrap\" fxLayoutAlign=\"start stretch\" fxLayoutGap=\"20px\">\n  <div *ngFor=\"let item of stats\" fxFlex=\"23\" class=\"card-33\" fxFill>\n    <mat-card class=\"mat-elevation-z4 margin-bottom\">\n      <div fxLayout=\"row\" fxLayoutGap=\"20px\">\n        <div>\n            <img class=\"avatar_lg\" src=\"{{item.statsData.avatar}}\" *ngIf=\"item.statsData.avatar\" />\n            <img class=\"avatar_lg\" src=\"'../../../../assets/avatar.svg\" *ngIf=\"!item.statsData.avatar\" />\n        </div>\n        <div class=\"statistics\">\n          <h3>{{item.createBy}}</h3>\n          <span> Applications: {{item.statsData.app}} </span> <br/>\n          <span>Money In: {{item.statsData.moneyIn}}</span><br/>\n          <span>Approved: {{item.statsData.approved}}</span><br/>\n          <span>Invoice Out: {{item.statsData.invoiceOut}}</span> <br/>\n          <span>Incoice Paid: {{item.statsData.invoicePaid}}</span><br/>\n          <span>Denied: {{item.statsData.denied}}</span><br>\n          <span>Price: {{item.statsData.price}}</span>\n        </div>\n      </div>\n    </mat-card>\n  </div>\n    </div>\n</div>\n\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  firebase: {\n    apiKey: \"AIzaSyAdEDQSLRncPA2T58YrN1oZ_PMc_VD86VI\",\n    authDomain: \"dashboard-6f7ca.firebaseapp.com\",\n    databaseURL: \"https://dashboard-6f7ca.firebaseio.com\",\n    projectId: \"dashboard-6f7ca\",\n    storageBucket: \"dashboard-6f7ca.appspot.com\",\n    messagingSenderId: \"934901644754\",\n    appId: \"1:934901644754:web:f887d2e4e416a63fa81c0b\"\n\n    // apiKey: \"AIzaSyDREnvrNIk2IXT_5H1Y_NV0GL_Ttd5hPwk\",\n    // authDomain: \"dashboard-29df7.firebaseapp.com\",\n    // databaseURL: \"https://dashboard-29df7.firebaseio.com\",\n    // projectId: \"dashboard-29df7\",\n    // storageBucket: \"dashboard-29df7.appspot.com\",\n    // messagingSenderId: \"458597392670\",\n    // appId: \"1:458597392670:web:108baed77f125e2f\"\n  }\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","/* (ignored) */"]}